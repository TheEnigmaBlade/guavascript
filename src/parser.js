/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,129],$V1=[1,5],$V2=[5,36,48],$V3=[1,21],$V4=[1,40],$V5=[1,24],$V6=[1,22],$V7=[1,23],$V8=[1,48],$V9=[1,27],$Va=[1,54],$Vb=[1,28],$Vc=[1,29],$Vd=[1,25],$Ve=[1,26],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,41],$Vj=[1,42],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,39],$Vo=[1,44],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,50],$Vt=[1,51],$Vu=[1,52],$Vv=[1,53],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[2,128],$VC=[1,63],$VD=[5,12,13,15,28,30,31,32,34,36,39,40,42,43,47,48,49,54,55,56,57,58,59,60,61,67,68,80,91,95,96,100,101,102,103,104,105,106,107,108,109],$VE=[5,17,32,36,38,42,48,68,109],$VF=[5,36,48,109],$VG=[1,72],$VH=[2,113],$VI=[12,13,15,28,30,31,34,39,40,43,47,48,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$VJ=[15,36,39],$VK=[15,28,30,31,34,39,40,42,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$VL=[1,86],$VM=[1,87],$VN=[1,90],$VO=[1,93],$VP=[2,101],$VQ=[1,96],$VR=[1,97],$VS=[1,99],$VT=[1,100],$VU=[1,101],$VV=[1,102],$VW=[1,103],$VX=[1,98],$VY=[5,17,32,34,36,38,42,48,53,68,78,79,109],$VZ=[5,17,31,32,34,36,38,40,42,48,53,65,66,68,72,73,74,75,76,78,79,82,83,84,85,86,87,90,91,92,93,94,98,109],$V_=[5,17,32,34,36,38,42,48,53,68,78,79,82,83,84,85,86,87,109],$V$=[1,119],$V01=[1,120],$V11=[1,121],$V21=[1,122],$V31=[1,123],$V41=[5,17,32,34,36,38,42,48,53,65,66,68,78,79,82,83,84,85,86,87,90,91,92,93,94,109],$V51=[12,13,15,28,30,31,34,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$V61=[15,28,30,31,32,34,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$V71=[17,49],$V81=[15,32],$V91=[15,28,30,31,34,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$Va1=[5,17,36,48,109],$Vb1=[15,31,39,91,95,96,100,101,102,103,104,105,106,107,108],$Vc1=[1,181],$Vd1=[2,48],$Ve1=[1,199],$Vf1=[17,32,109],$Vg1=[34,109],$Vh1=[2,107],$Vi1=[17,36,109],$Vj1=[2,108];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"w":6,"expression_list":7,"expression":8,"statement":9,"W":10,"var_declaration":11,"THROW":12,"VARIABLE":13,"var_declarators":14,"IDENTIFIER":15,"assignment_operator":16,"COMMA":17,"alias_call_expressions":18,"execution_expression":19,"anon_expression":20,"object_expression":21,"array_expression":22,"function_expression":23,"control_expression":24,"loop_expression":25,"assignment_expression":26,"try_catch_expression":27,"PRINT":28,"alias_call":29,"ERROR":30,"LPAREN":31,"RPAREN":32,"call_arguments":33,"LBRACKET":34,"object_contents":35,"RBRACKET":36,"object_content_thing":37,"COLON":38,"STRING":39,"LSQUARE":40,"array_contents":41,"RSQUARE":42,"FUNCTION":43,"block_expression":44,"function_arguments_opt":45,"function_arguments":46,"LEXEC":47,"REXEC":48,"BITOR":49,"anon_arguments":50,"if_control_expression":51,"conditional_expression":52,"TERNARY":53,"BREAK":54,"CONTINUE":55,"RETURN":56,"IF":57,"ELSE":58,"LOOP":59,"WHILE":60,"FOR":61,"IN":62,"iterable":63,"op_expression":64,"RANGE":65,"STEP":66,"TRY":67,"CATCH":68,"inc_depth":69,"dec_depth":70,"post_expression":71,"ASSIGN":72,"PLUSASSIGN":73,"MINUSASSIGN":74,"MULTIPLYASSIGN":75,"DIVIDEASSIGN":76,"compare_expression":77,"OR":78,"AND":79,"NOT":80,"compare_operator":81,"GT":82,"LT":83,"GTE":84,"LTE":85,"EQUALS":86,"NOTEQUALS":87,"unary_expression":88,"op_operator":89,"PLUS":90,"MINUS":91,"MULTIPLY":92,"DIVIDE":93,"INSTANCEOF":94,"NEW":95,"TYPEOF":96,"primary_expression":97,"DOT":98,"constant":99,"NUMBER":100,"HEXNUMBER":101,"OCTALNUMBER":102,"BINARYNUMBER":103,"THIS":104,"TRUE":105,"FALSE":106,"NULL":107,"UNDEFINED":108,"NEWLINE":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"THROW",13:"VARIABLE",15:"IDENTIFIER",17:"COMMA",28:"PRINT",30:"ERROR",31:"LPAREN",32:"RPAREN",34:"LBRACKET",36:"RBRACKET",38:"COLON",39:"STRING",40:"LSQUARE",42:"RSQUARE",43:"FUNCTION",47:"LEXEC",48:"REXEC",49:"BITOR",53:"TERNARY",54:"BREAK",55:"CONTINUE",56:"RETURN",57:"IF",58:"ELSE",59:"LOOP",60:"WHILE",61:"FOR",62:"IN",65:"RANGE",66:"STEP",67:"TRY",68:"CATCH",72:"ASSIGN",73:"PLUSASSIGN",74:"MINUSASSIGN",75:"MULTIPLYASSIGN",76:"DIVIDEASSIGN",78:"OR",79:"AND",80:"NOT",82:"GT",83:"LT",84:"GTE",85:"LTE",86:"EQUALS",87:"NOTEQUALS",90:"PLUS",91:"MINUS",92:"MULTIPLY",93:"DIVIDE",94:"INSTANCEOF",95:"NEW",96:"TYPEOF",98:"DOT",100:"NUMBER",101:"HEXNUMBER",102:"OCTALNUMBER",103:"BINARYNUMBER",104:"THIS",105:"TRUE",106:"FALSE",107:"NULL",108:"UNDEFINED",109:"NEWLINE"},
productions_: [0,[3,2],[4,4],[4,3],[4,4],[4,3],[4,1],[7,3],[7,2],[7,3],[7,2],[9,1],[9,2],[11,2],[14,1],[14,3],[14,4],[14,6],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[18,2],[18,2],[29,3],[29,5],[19,2],[21,3],[35,3],[35,4],[35,1],[37,4],[37,4],[22,3],[41,3],[41,4],[41,1],[23,3],[23,4],[23,7],[23,8],[45,2],[45,0],[46,1],[46,4],[20,3],[20,6],[50,1],[50,3],[24,1],[24,7],[24,1],[24,1],[24,1],[24,2],[51,4],[51,5],[51,3],[25,2],[25,4],[25,6],[25,8],[25,10],[63,1],[63,1],[27,7],[44,5],[69,0],[70,0],[26,1],[26,3],[16,1],[16,1],[16,1],[16,1],[16,1],[52,1],[52,3],[52,3],[52,2],[77,1],[77,3],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[64,1],[64,3],[89,1],[89,1],[89,1],[89,1],[89,1],[88,1],[88,2],[88,5],[88,7],[88,2],[71,1],[71,4],[71,6],[71,4],[71,3],[33,1],[33,4],[97,1],[97,1],[97,5],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[10,2],[10,1],[6,1],[6,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ast.Program($$[$0-1]);
break;
case 2: case 4:
this.$ = $$[$0-2]; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 3: case 5: case 8: case 10:
this.$ = []; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 6: case 30: case 36: case 42: case 48:
this.$ = [];
break;
case 7: case 9:
noNullPush($$[$0-2], processTopLevelExpression($$[$0-1]));
break;
case 11: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 55: case 75: case 82: case 86: case 94: case 101: case 106: case 114:
this.$ = $$[$0];
break;
case 12:
this.$ = ast.ThrowStatement($$[$0]);
break;
case 13:
this.$ = ast.VarDeclarations($$[$0-1], $$[$0]);
break;
case 14:
this.$ = [ast.VarDeclaration($$[$0])];
break;
case 15:
this.$ = [ast.VarDeclaration($$[$0-2], $$[$0])];
break;
case 16:
$$[$0-3].push(ast.VarDeclaration($$[$0]));
break;
case 17:
$$[$0-5].push(ast.VarDeclaration($$[$0-2], $$[$0]));
break;
case 28:
this.$ = ast.AliasPrint($$[$0]);
break;
case 29:
this.$ = ast.AliasError($$[$0]);
break;
case 31: case 115:
this.$ = $$[$0-2];
break;
case 32:
this.$ = ast.ExecExpression($$[$0-1], $$[$0]);
break;
case 33:
this.$ = ast.ObjectExpression($$[$0-1]);
break;
case 34: case 40:
this.$ = [$$[$0-1]];
break;
case 35: case 41:
this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 37:
this.$ = ast.ObjectThing(ast.Identifier($$[$0-3]), $$[$0]);
break;
case 38:
this.$ = ast.ObjectThing(ast.StringLiteral($$[$0-3]), $$[$0]);
break;
case 39:
this.$ = ast.ArrayExpression($$[$0-1]);
break;
case 43:
this.$ = ast.AnonFuncExpression(null, $$[$0]);
break;
case 44:
this.$ = ast.FuncExpression($$[$0-2], null, $$[$0]);
break;
case 45:
this.$ = ast.AnonFuncExpression($$[$0-3], $$[$0]);
break;
case 46:
this.$ = ast.FuncExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 47:
this.$ = $$[$0-1];
break;
case 49: case 53:
this.$ = [ast.Identifier($$[$0])];
break;
case 50:
$$[$0-3].push(ast.Identifier($$[$0]));
break;
case 51:
this.$ = ast.AnonFuncExpression(null, ast.BlockExpression($$[$0-1]));
break;
case 52:
this.$ = ast.AnonFuncExpression($$[$0-4], ast.BlockExpression($$[$0-1]));
break;
case 54:
$$[$0-2].push(ast.Identifier($$[$0]));
break;
case 56:
this.$ = ast.TernaryExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 57:
this.$ = ast.Break();
break;
case 58:
this.$ = ast.Continue();
break;
case 59:
this.$ = ast.Return();
break;
case 60:
this.$ = ast.Return($$[$0]);
break;
case 61:
this.$ = ast.IfExpression($$[$0-2], $$[$0]);
break;
case 62:
this.$ = ast.ElseIfExpression($$[$0-2], $$[$0]);
break;
case 63:
this.$ = ast.ElseExpression($$[$0]);
break;
case 64:
this.$ = ast.LoopExpression($$[$0]);
break;
case 65:
this.$ = ast.WhileLoop($$[$0-2], $$[$0]);
break;
case 66:
this.$ = ast.ForEachLoop($$[$0-2], $$[$0-4], $$[$0]);
break;
case 67:
this.$ = ast.ForLoop($$[$0-6], $$[$0-4], $$[$0-2], 1, $$[$0]);
break;
case 68:
this.$ = ast.ForLoop($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 71:

		this.$ = ast.TryExpression(ast.BlockExpression([processTopLevelExpression($$[$0-5])]),
								ast.CatchClause(ast.Identifier($$[$0-2]), $$[$0]));
break;
case 72:
this.$ = ast.BlockExpression($$[$0-2]);
break;
case 73:
incDepth();
break;
case 74:
decDepth();
break;
case 76:
this.$ = ast.AssignExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 77:
this.$ = "=";
break;
case 78:
this.$ = "+=";
break;
case 79:
this.$ = "-=";
break;
case 80:
this.$ = "*=";
break;
case 81:
this.$ = "/=";
break;
case 83:
this.$ = ast.LogicExpression("||", $$[$0-2], $$[$0]);
break;
case 84:
this.$ = ast.LogicExpression("&&", $$[$0-2], $$[$0]);
break;
case 85:
this.$ = ast.UnaryExpression("!", $$[$0]);
break;
case 87: case 95:
this.$ = ast.BinaryExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 88:
this.$ = ">";
break;
case 89:
this.$ = "<";
break;
case 90:
this.$ = ">=";
break;
case 91:
this.$ = "<=";
break;
case 92:
this.$ = "===";
break;
case 93:
this.$ = "!==";
break;
case 96:
this.$ = "+";
break;
case 97:
this.$ = "-";
break;
case 98:
this.$ = "*";
break;
case 99:
this.$ = "/";
break;
case 100:
this.$ = "instanceof";
break;
case 102:
this.$ = ast.UnaryExpression("-", $$[$0]);
break;
case 103:
this.$ = ast.NewExpression($$[$0-3]);
break;
case 104:
this.$ = ast.NewExpression($$[$0-5], $$[$0-2]);
break;
case 105:
this.$ = ast.UnaryExpression("typeof", $$[$0]);
break;
case 107:
this.$ = ast.CallExpression($$[$0-3]);
break;
case 108:
this.$ = ast.CallExpression($$[$0-5], $$[$0-2]);
break;
case 109:
this.$ = ast.MemberExpression($$[$0-3], $$[$0-1]);
break;
case 110:
this.$ = ast.PropertyExpression($$[$0-2], ast.Identifier($$[$0]));
break;
case 111:
this.$ = [$$[$0]];
break;
case 112:
$$[$0-3].push($$[$0]);
break;
case 113:
this.$ = ast.Identifier($$[$0]);
break;
case 116: case 117: case 118: case 119:
this.$ = ast.NumericLiteral($$[$0]);
break;
case 120:
this.$ = ast.StringLiteral($$[$0]);
break;
case 121:
this.$ = ast.ThisExpression();
break;
case 122:
this.$ = ast.BooleanLiteral(true);
break;
case 123:
this.$ = ast.BooleanLiteral(false);
break;
case 124:
this.$ = ast.NullLiteral();
break;
case 125:
this.$ = ast.Undefined();
break;
}
},
table: [o([5,12,13,15,28,30,31,34,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$V0,{3:1,4:2,6:3,10:4,109:$V1}),{1:[3]},{5:[1,6]},o($V2,[2,6],{7:7,8:8,9:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,11:20,51:30,52:31,71:38,77:43,97:45,64:46,99:47,88:49,12:$V3,13:$V4,15:$V5,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,67:$Vn,80:$Vo,91:$Vp,95:$Vq,96:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA}),o([5,12,13,15,28,30,31,32,34,36,39,40,42,43,47,48,49,54,55,56,57,58,59,60,61,67,68,80,91,95,96,100,101,102,103,104,105,106,107,108],$VB,{109:$VC}),o($VD,[2,127]),{1:[2,1]},{8:64,9:65,11:20,12:$V3,13:$V4,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($V2,$V0,{6:66,10:67,109:$V1}),o($V2,$V0,{6:68,10:69,109:$V1}),o($VE,[2,18]),o($VE,[2,19]),o($VE,[2,20]),o($VE,[2,21]),o($VE,[2,22]),o($VE,[2,23]),o($VE,[2,24]),o($VE,[2,25]),o($VE,[2,26]),o($VE,[2,27]),o($VF,[2,11]),{8:70,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{29:71,31:$VG},{29:73,31:$VG},o([5,17,31,32,36,38,40,42,48,53,68,72,73,74,75,76,78,79,82,83,84,85,86,87,90,91,92,93,94,98,109],$VH,{20:74,47:$Vd,49:$Ve}),o($VI,$V0,{6:3,10:4,4:75,109:$V1}),{15:[1,77],50:76},o($VJ,$V0,{10:4,35:78,6:79,109:$V1}),o($VK,$V0,{10:4,41:80,6:81,109:$V1}),{6:82,10:4,15:[1,83],31:[1,84],34:$V0,109:$V1},o($VE,[2,55]),o($VE,[2,75],{53:[1,85],78:$VL,79:$VM}),o($VE,[2,57]),o($VE,[2,58]),o($VE,[2,59],{18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,51:30,52:31,71:38,77:43,97:45,64:46,99:47,88:49,8:88,15:$V5,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,67:$Vn,80:$Vo,91:$Vp,95:$Vq,96:$Vr,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA}),{34:$VN,44:89},{15:$VO,31:$V8,39:$Va,52:91,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{15:[1,94]},o([5,17,32,36,38,42,48,53,68,78,79,82,83,84,85,86,87,90,91,92,93,94,109],$VP,{16:95,31:$VQ,40:$VR,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW,98:$VX}),{8:104,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{14:105,15:[1,106]},{15:$VO,31:$V8,39:$Va,52:107,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{6:109,10:4,34:$V0,57:[1,108],109:$V1},o($VY,[2,82],{81:110,82:[1,111],83:[1,112],84:[1,113],85:[1,114],86:[1,115],87:[1,116]}),{15:$VO,31:$V8,39:$Va,52:117,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VZ,[2,106]),o($V_,[2,86],{89:118,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31}),o($VZ,[2,114]),o([15,31,39,80,91,95,96,100,101,102,103,104,105,106,107,108],$V0,{10:4,6:124,109:$V1}),o($V41,[2,94]),o($VZ,[2,116]),o($VZ,[2,117]),o($VZ,[2,118]),o($VZ,[2,119]),o($VZ,[2,120]),o($VZ,[2,121]),o($VZ,[2,122]),o($VZ,[2,123]),o($VZ,[2,124]),o($VZ,[2,125]),{15:$VO,31:$V8,39:$Va,71:92,88:125,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{15:$VO,31:$V8,39:$Va,71:126,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{15:$VO,31:$V8,39:$Va,71:127,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VD,[2,126]),o($V2,$V0,{6:128,10:129,109:$V1}),o($V2,$V0,{6:130,10:131,109:$V1}),o($V2,[2,3]),o($V51,[2,8],{5:$VB,36:$VB,48:$VB,109:$VC}),o($V2,[2,5]),o($V51,[2,10],{5:$VB,36:$VB,48:$VB,109:$VC}),o($VF,[2,12]),o($VE,[2,28]),o($V61,$V0,{10:4,6:132,109:$V1}),o($VE,[2,29]),o($VE,[2,32]),{48:[1,133]},{17:[1,135],49:[1,134]},o($V71,[2,53]),{36:[1,136]},{15:[1,138],36:[2,36],37:137,39:[1,139]},{42:[1,140]},{8:141,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,42:[2,42],43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{34:$VN,44:142},{6:143,10:4,31:[1,144],34:$V0,109:$V1},o($V81,$V0,{10:4,6:145,109:$V1}),o($V91,$V0,{10:4,6:146,109:$V1}),{15:$VO,31:$V8,39:$Va,52:147,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{15:$VO,31:$V8,39:$Va,52:148,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,60]),o($VE,[2,64]),o([12,13,15,28,30,31,34,36,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108,109],[2,73],{69:149}),{6:150,10:4,34:$V0,78:$VL,79:$VM,109:$V1},o($V41,$VP,{31:$VQ,40:$VR,98:$VX}),o([5,17,31,32,34,36,38,40,42,48,53,65,66,68,78,79,82,83,84,85,86,87,90,91,92,93,94,98,109],$VH),{62:[1,151]},{8:152,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($V61,$V0,{10:4,6:153,109:$V1}),{8:154,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{15:[1,155]},o($V91,[2,77]),o($V91,[2,78]),o($V91,[2,79]),o($V91,[2,80]),o($V91,[2,81]),{6:156,10:4,68:$V0,109:$V1},o($VF,[2,13],{17:[1,157]}),o($Va1,[2,14],{16:158,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW}),{6:159,10:4,34:$V0,78:$VL,79:$VM,109:$V1},{15:$VO,31:$V8,39:$Va,52:160,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{34:$VN,44:161},{15:$VO,31:$V8,39:$Va,64:162,71:92,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($Vb1,[2,88]),o($Vb1,[2,89]),o($Vb1,[2,90]),o($Vb1,[2,91]),o($Vb1,[2,92]),o($Vb1,[2,93]),o($VY,[2,85]),{15:$VO,31:$V8,39:$Va,71:92,88:163,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($Vb1,[2,96]),o($Vb1,[2,97]),o($Vb1,[2,98]),o($Vb1,[2,99]),o($Vb1,[2,100]),{15:$VO,31:$V8,39:$Va,52:164,64:46,71:92,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($V41,[2,102]),{31:[1,165],40:$VR,98:$VX},o($V41,[2,105],{31:$VQ,40:$VR,98:$VX}),o($V2,[2,2]),o($V51,[2,7],{5:$VB,36:$VB,48:$VB,109:$VC}),o($V2,[2,4]),o($V51,[2,9],{5:$VB,36:$VB,48:$VB,109:$VC}),{8:168,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,32:[1,166],33:167,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,51]),{47:[1,169]},{15:[1,170]},o($VE,[2,33]),{6:171,10:4,17:[1,172],36:$V0,109:$V1},{38:[1,173]},{38:[1,174]},o([5,17,32,34,36,38,42,48,68,109],[2,39]),{6:175,10:4,17:[1,176],42:$V0,109:$V1},o($VE,[2,43]),{34:$VN,44:177},o($V81,$V0,{10:4,6:178,109:$V1}),{15:$Vc1,32:$Vd1,45:179,46:180},{8:182,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VY,[2,83]),o($VY,[2,84]),o([12,13,15,28,30,31,34,36,39,40,43,47,49,54,55,56,57,58,59,60,61,67,80,91,95,96,100,101,102,103,104,105,106,107,108],$V0,{6:3,10:4,4:183,109:$V1}),{34:$VN,44:184},{15:$VO,22:187,31:$V8,39:$Va,40:$Vb,63:185,64:186,71:92,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,76]),{8:168,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,32:[1,188],33:189,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{42:[1,190]},o($VZ,[2,110]),{68:[1,191]},{6:192,10:4,15:$V0,109:$V1},{8:193,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{34:$VN,44:194},{6:195,10:4,34:$V0,78:$VL,79:$VM,109:$V1},o($VE,[2,63]),o($V_,[2,87],{89:118,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31}),o($V41,[2,95]),{6:196,10:4,32:$V0,78:$VL,79:$VM,109:$V1},o($V61,$V0,{10:4,6:197,109:$V1}),o($VE,[2,30]),{6:198,10:4,17:$Ve1,32:$V0,109:$V1},o($Vf1,[2,111]),o($VI,$V0,{6:3,10:4,4:200,109:$V1}),o($V71,[2,54]),{36:[2,34]},o($VJ,$V0,{10:4,6:79,35:201,109:$V1}),o($V91,$V0,{10:4,6:202,109:$V1}),o($V91,$V0,{10:4,6:203,109:$V1}),{42:[2,40]},o($VK,$V0,{10:4,6:81,41:204,109:$V1}),o($VE,[2,44]),{15:$Vc1,32:$Vd1,45:205,46:180},{32:[1,206]},{6:207,10:4,17:[1,208],32:$V0,109:$V1},o($Vf1,[2,49]),{38:[1,209]},{36:[2,74],70:210},o($VE,[2,65]),{6:211,10:4,34:$V0,109:$V1},o($Vg1,[2,69],{89:118,65:[1,212],90:$V$,91:$V01,92:$V11,93:$V21,94:$V31}),o($Vg1,[2,70]),o($VZ,$Vh1),{6:213,10:4,17:$Ve1,32:$V0,109:$V1},o($VZ,[2,109]),{15:[1,214]},{15:[1,215]},o($Va1,[2,15]),o($VE,[2,61]),{34:$VN,44:216},{32:[1,217]},{8:168,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,32:[1,218],33:219,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{32:[1,220]},o($V91,$V0,{10:4,6:221,109:$V1}),{48:[1,222]},{36:[2,35]},{8:223,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{8:224,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{42:[2,41]},{32:[1,225]},{6:226,10:4,34:$V0,109:$V1},{32:[2,47]},{6:227,10:4,15:$V0,109:$V1},o($V91,$V0,{10:4,6:228,109:$V1}),{36:[1,229]},{34:$VN,44:230},{15:$VO,31:$V8,39:$Va,64:231,71:92,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{32:[1,232]},{6:233,10:4,34:$V0,109:$V1},o($Va1,[2,16],{16:234,72:$VS,73:$VT,74:$VU,75:$VV,76:$VW}),o($VE,[2,62]),o($VZ,[2,115]),o($V41,[2,103],{31:$Vh1,40:$Vh1,98:$Vh1}),{6:235,10:4,17:$Ve1,32:$V0,109:$V1},o($VE,[2,31]),{8:236,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,52]),o($Vi1,[2,37]),o($Vi1,[2,38]),{6:237,10:4,34:$V0,109:$V1},{34:$VN,44:238},{15:[1,239]},{8:240,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,72]),o($VE,[2,66]),{6:241,10:4,34:$V0,66:[1,242],89:118,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,109:$V1},o($VZ,$Vj1),{34:$VN,44:243},{8:244,15:$V5,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:17,26:18,27:19,28:$V6,30:$V7,31:$V8,34:$V9,39:$Va,40:$Vb,43:$Vc,47:$Vd,49:$Ve,51:30,52:31,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:$Vm,64:46,67:$Vn,71:38,77:43,80:$Vo,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},{32:[1,245]},o($Vf1,[2,112]),{34:$VN,44:246},o($VE,[2,45]),o($Vf1,[2,50]),o($VE,[2,56]),{34:$VN,44:247},{15:$VO,31:$V8,39:$Va,64:248,71:92,88:49,91:$Vp,95:$Vq,96:$Vr,97:45,99:47,100:$Vs,101:$Vt,102:$Vu,103:$Vv,104:$Vw,105:$Vx,106:$Vy,107:$Vz,108:$VA},o($VE,[2,71]),o($Va1,[2,17]),o($V41,[2,104],{31:$Vj1,40:$Vj1,98:$Vj1}),o($VE,[2,46]),o($VE,[2,67]),{6:249,10:4,34:$V0,89:118,90:$V$,91:$V01,92:$V11,93:$V21,94:$V31,109:$V1},{34:$VN,44:250},o($VE,[2,68])],
defaultActions: {6:[2,1],171:[2,34],175:[2,40],201:[2,35],204:[2,41],207:[2,47]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ast = require("./ast");
	
	// Depth tracking
	var depth = 0;
	
	function incDepth() {
		depth += 1;
	}
	
	function decDepth() {
		depth -= 1;
	}
	
	var top_level_if = [];
	
	function processTopLevelExpression(e, nameAnon) {
		// Move if-else/else into alternate slots
		if(e._if) {
			e._depth = depth;
			top_level_if.push(e);
			return e;
		}
		if(e._if_else || e._else) {
			var top;
			if(top_level_if.length === 0 || (top = top_level_if[top_level_if.length-1])._depth !== depth) {
				throw "else-if/else found before if";
			}
			
			top.alternate = e;
			if(e._else) {
				top_level_if.pop();
			}
			return null;
		}
		
		//console.log("Processing top level thing");
		while(top_level_if.length > 0 && top_level_if[top_level_if.length-1]._depth >= depth) {
			top_level_if.pop();
		}
		
		// Wrap or declarize functions
		if(e._anon) {
			console.log("Is anon");
			// Wrap non-named anonymous functions
			if(nameAnon) {
				return ast.toFuncDeclaration(e, ast.getUID("anon"));
			}
			else {
				return ast.ExecExpression(null, e);
			}
		}
		if(e._func) {
			console.log("Is func");
			// Change named functions to declarations
			return ast.toFuncDeclaration(e);
		}
		// Wrap plain expressions
		if(e._expr) {
			console.log("Is expression");
			return ast.Expression(e);
		}
		
		return e;
	}
	
	function noNullPush(list, thing) {
		if(thing !== undefined && thing !== null) {
			list.push(thing);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	if(!(yy.commentDepth)) {
		yy.commentDepth = 0;
	}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore comments */
break;
case 1:/* Ignore comments */
break;
case 2:yy.commentDepth++; this.begin("comment");
break;
case 3:yy.commentDepth++;
break;
case 4:yy.commentDepth--; if(yy.commentDepth === 0) {this.popState();}
break;
case 5:return "NEWLINE";
break;
case 6:/* Ignore whitespace */
break;
case 7:this.begin("dstring"); string = "";
break;
case 8:this.popState(); yy_.yytext = string; return "STRING";
break;
case 9:this.begin("esc");
break;
case 10:string += yy_.yytext;
break;
case 11:this.begin("sstring"); string = "";
break;
case 12:this.popState(); yy_.yytext = string; return "STRING";
break;
case 13:this.begin("esc");
break;
case 14:string += yy_.yytext;
break;
case 15:string += "\n"; this.popState();
break;
case 16:string += "\r"; this.popState();
break;
case 17:string += "\t"; this.popState();
break;
case 18:string += "\0"; this.popState();
break;
case 19:string += "\'"; this.popState();
break;
case 20:string += "\""; this.popState();
break;
case 21:return "HEXNUMBER";
break;
case 22:return "OCTALNUMBER";
break;
case 23:return "BINARYNUMBER";
break;
case 24:return "NUMBER";
break;
case 25:this.begin("anonfunc");	return "LEXEC";
break;
case 26:this.popState();			return "REXEC";
break;
case 27:return "RANGE";
break;
case 28:return "PLUSASSIGN";
break;
case 29:return "MINUSASSIGN";
break;
case 30:return "MULTIPLAYASSIGN";
break;
case 31:return "DIVIDEASSIGN";
break;
case 32:return "EQUALS";
break;
case 33:return "NOTEQUALS";
break;
case 34:return "GTE";
break;
case 35:return "LTE";
break;
case 36:return "GT";
break;
case 37:return "LT";
break;
case 38:return "AND";
break;
case 39:return "OR";
break;
case 40:return "NOT";
break;
case 41:return "MULTIPLY";
break;
case 42:return "DIVIDE";
break;
case 43:return "MINUS";
break;
case 44:return "PLUS";
break;
case 45:return "ASSIGN";
break;
case 46:return "BITOR";
break;
case 47:return "BITAND";
break;
case 48:return "LBRACKET";
break;
case 49:return "RBRACKET";
break;
case 50:return "LSQUARE";
break;
case 51:return "RSQUARE";
break;
case 52:return "LPAREN";
break;
case 53:return "RPAREN";
break;
case 54:return "DOT";
break;
case 55:return "COMMA";
break;
case 56:return "COLON";
break;
case 57:return "TERNARY";
break;
case 58:return "TRUE";
break;
case 59:return "FALSE";
break;
case 60:return "NULL";
break;
case 61:return "UNDEFINED";
break;
case 62:return "FUNCTION";
break;
case 63:return "FUNCTION";
break;
case 64:return "FUNCTION";
break;
case 65:return "VARIABLE";
break;
case 66:return "VARIABLE";
break;
case 67:return "IF";
break;
case 68:return "ELSE";
break;
case 69:return "LOOP";
break;
case 70:return "WHILE";
break;
case 71:return "FOR";
break;
case 72:return "IN";
break;
case 73:return "STEP";
break;
case 74:return "STEP";
break;
case 75:return "RETURN";
break;
case 76:return "BREAK";
break;
case 77:return "CONTINUE";
break;
case 78:return "PRINT";
break;
case 79:return "ERROR";
break;
case 80:return "THIS";
break;
case 81:return "NEW";
break;
case 82:return "INSTANCEOF";
break;
case 83:return "TYPEOF";
break;
case 84:return "THROW";
break;
case 85:return "TRY";
break;
case 86:return "CATCH";
break;
case 87:return "FINALLY";
break;
case 88:return "IDENTIFIER";
break;
case 89:return "EOF";
break;
case 90:return "INVALID";
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:\/\*)/,/^(?:.*?(\/\*))/,/^(?:.*?(\*\/))/,/^(?:([\n\r])+)/,/^(?:\s+)/,/^(?:")/,/^(?:")/,/^(?:\\)/,/^(?:[^"\\]*)/,/^(?:')/,/^(?:')/,/^(?:\\)/,/^(?:[^'\\]*)/,/^(?:[n])/,/^(?:[r])/,/^(?:[t])/,/^(?:[0])/,/^(?:['])/,/^(?:["])/,/^(?:0x([0-9a-fA-F]([_]?[0-9a-fA-F])*)\b)/,/^(?:0o([0-7]([_]?[0-7])*)\b)/,/^(?:0b([01]([_]?[01])*)\b)/,/^(?:(([0-9]([_]?[0-9])*)([\.][0-9]+)?|[\.][0-9]+)\b)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\.\.)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:\|)/,/^(?:&)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:func\b)/,/^(?:fun\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:step\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:print\b)/,/^(?:error\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:instanceof\b)/,/^(?:typeof\b)/,/^(?:throw\b)/,/^(?:try\b)/,/^(?:catch\b)/,/^(?:always\b)/,/^(?:([a-zA-Z_$][a-zA-Z0-9_$]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"anonfunc":{"rules":[0,1,2,5,6,7,11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true},"comment":{"rules":[3,4],"inclusive":false},"esc":{"rules":[15,16,17,18,19,20],"inclusive":false},"sstring":{"rules":[12,13,14],"inclusive":false},"dstring":{"rules":[8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,2,5,6,7,11,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
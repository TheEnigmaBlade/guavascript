/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,127],$V1=[1,5],$V2=[5,35,47],$V3=[1,20],$V4=[1,21],$V5=[1,22],$V6=[1,46],$V7=[1,38],$V8=[1,23],$V9=[1,26],$Va=[1,52],$Vb=[1,27],$Vc=[1,28],$Vd=[1,24],$Ve=[1,25],$Vf=[1,31],$Vg=[1,32],$Vh=[1,33],$Vi=[1,39],$Vj=[1,40],$Vk=[1,34],$Vl=[1,35],$Vm=[1,36],$Vn=[1,42],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,53],$Vw=[1,54],$Vx=[1,55],$Vy=[1,56],$Vz=[1,57],$VA=[2,126],$VB=[1,61],$VC=[5,12,22,24,25,26,28,30,33,35,38,39,41,42,46,47,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105,106],$VD=[5,26,32,35,37,41,47,106],$VE=[5,35,47,106],$VF=[1,70],$VG=[2,111],$VH=[12,22,24,25,28,30,33,38,39,42,46,47,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$VI=[30,35,38],$VJ=[22,24,25,30,33,38,39,41,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$VK=[1,84],$VL=[1,85],$VM=[1,88],$VN=[1,91],$VO=[2,99],$VP=[1,94],$VQ=[1,95],$VR=[1,97],$VS=[1,98],$VT=[1,99],$VU=[1,100],$VV=[1,101],$VW=[1,96],$VX=[5,26,32,33,35,37,41,47,52,75,76,106],$VY=[5,25,26,32,33,35,37,39,41,47,52,64,65,69,70,71,72,73,75,76,79,80,81,82,83,84,87,88,89,90,91,95,106],$VZ=[5,26,32,33,35,37,41,47,52,75,76,79,80,81,82,83,84,106],$V_=[1,116],$V$=[1,117],$V01=[1,118],$V11=[1,119],$V21=[1,120],$V31=[5,26,32,33,35,37,41,47,52,64,65,75,76,79,80,81,82,83,84,87,88,89,90,91,106],$V41=[12,22,24,25,28,30,33,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$V51=[22,24,25,26,30,33,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$V61=[32,48],$V71=[26,30],$V81=[22,24,25,30,33,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$V91=[5,32,35,47,106],$Va1=[25,30,38,88,92,93,97,98,99,100,101,102,103,104,105],$Vb1=[2,47],$Vc1=[1,177],$Vd1=[1,194],$Ve1=[26,32,106],$Vf1=[33,106],$Vg1=[2,105],$Vh1=[32,35,106],$Vi1=[2,106];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"w":6,"expression_list":7,"expression":8,"statement":9,"W":10,"var_declaration":11,"THROW":12,"alias_call_expressions":13,"execution_expression":14,"anon_expression":15,"object_expression":16,"array_expression":17,"function_expression":18,"control_expression":19,"loop_expression":20,"assignment_expression":21,"PRINT":22,"alias_call":23,"ERROR":24,"LPAREN":25,"RPAREN":26,"call_arguments":27,"VARIABLE":28,"var_declarators":29,"IDENTIFIER":30,"assignment_operator":31,"COMMA":32,"LBRACKET":33,"object_contents":34,"RBRACKET":35,"object_content_thing":36,"COLON":37,"STRING":38,"LSQUARE":39,"array_contents":40,"RSQUARE":41,"FUNCTION":42,"block_expression":43,"function_arguments_opt":44,"function_arguments":45,"LEXEC":46,"REXEC":47,"BITOR":48,"anon_arguments":49,"if_control_expression":50,"conditional_expression":51,"TERNARY":52,"BREAK":53,"CONTINUE":54,"RETURN":55,"IF":56,"ELSE":57,"LOOP":58,"WHILE":59,"FOR":60,"IN":61,"iterable":62,"op_expression":63,"RANGE":64,"STEP":65,"inc_depth":66,"dec_depth":67,"post_expression":68,"ASSIGN":69,"PLUSASSIGN":70,"MINUSASSIGN":71,"MULTIPLYASSIGN":72,"DIVIDEASSIGN":73,"compare_expression":74,"OR":75,"AND":76,"NOT":77,"compare_operator":78,"GT":79,"LT":80,"GTE":81,"LTE":82,"EQUALS":83,"NOTEQUALS":84,"unary_expression":85,"op_operator":86,"PLUS":87,"MINUS":88,"MULTIPLY":89,"DIVIDE":90,"INSTANCEOF":91,"NEW":92,"TYPEOF":93,"primary_expression":94,"DOT":95,"constant":96,"NUMBER":97,"HEXNUMBER":98,"OCTALNUMBER":99,"BINARYNUMBER":100,"THIS":101,"TRUE":102,"FALSE":103,"NULL":104,"UNDEFINED":105,"NEWLINE":106,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"THROW",22:"PRINT",24:"ERROR",25:"LPAREN",26:"RPAREN",28:"VARIABLE",30:"IDENTIFIER",32:"COMMA",33:"LBRACKET",35:"RBRACKET",37:"COLON",38:"STRING",39:"LSQUARE",41:"RSQUARE",42:"FUNCTION",46:"LEXEC",47:"REXEC",48:"BITOR",52:"TERNARY",53:"BREAK",54:"CONTINUE",55:"RETURN",56:"IF",57:"ELSE",58:"LOOP",59:"WHILE",60:"FOR",61:"IN",64:"RANGE",65:"STEP",69:"ASSIGN",70:"PLUSASSIGN",71:"MINUSASSIGN",72:"MULTIPLYASSIGN",73:"DIVIDEASSIGN",75:"OR",76:"AND",77:"NOT",79:"GT",80:"LT",81:"GTE",82:"LTE",83:"EQUALS",84:"NOTEQUALS",87:"PLUS",88:"MINUS",89:"MULTIPLY",90:"DIVIDE",91:"INSTANCEOF",92:"NEW",93:"TYPEOF",95:"DOT",97:"NUMBER",98:"HEXNUMBER",99:"OCTALNUMBER",100:"BINARYNUMBER",101:"THIS",102:"TRUE",103:"FALSE",104:"NULL",105:"UNDEFINED",106:"NEWLINE"},
productions_: [0,[3,2],[4,4],[4,3],[4,4],[4,3],[4,1],[7,3],[7,2],[7,3],[7,2],[9,1],[9,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[13,2],[13,2],[23,3],[23,5],[11,2],[29,1],[29,3],[29,4],[29,6],[14,2],[16,3],[34,3],[34,4],[34,1],[36,4],[36,4],[17,3],[40,3],[40,4],[40,1],[18,3],[18,4],[18,7],[18,8],[44,2],[44,0],[45,1],[45,4],[15,3],[15,6],[49,1],[49,3],[19,1],[19,7],[19,1],[19,1],[19,1],[19,2],[50,4],[50,5],[50,3],[20,2],[20,4],[20,6],[20,8],[20,10],[62,1],[62,1],[43,5],[66,0],[67,0],[21,1],[21,3],[31,1],[31,1],[31,1],[31,1],[31,1],[51,1],[51,3],[51,3],[51,2],[74,1],[74,3],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[63,1],[63,3],[86,1],[86,1],[86,1],[86,1],[86,1],[85,1],[85,2],[85,5],[85,7],[85,2],[68,1],[68,4],[68,6],[68,4],[68,3],[27,1],[27,4],[94,1],[94,1],[94,5],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[96,1],[10,2],[10,1],[6,1],[6,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ast.Program($$[$0-1]);
break;
case 2: case 4:
this.$ = $$[$0-2]; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 3: case 5: case 8: case 10:
this.$ = []; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 6: case 24: case 35: case 41: case 47:
this.$ = [];
break;
case 7: case 9:
noNullPush($$[$0-2], processTopLevelExpression($$[$0-1]));
break;
case 11: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 54: case 73: case 80: case 84: case 92: case 99: case 104: case 112:
this.$ = $$[$0];
break;
case 12:
this.$ = ast.ThrowStatement($$[$0]);
break;
case 22:
this.$ = ast.AliasPrint($$[$0]);
break;
case 23:
this.$ = ast.AliasError($$[$0]);
break;
case 25: case 113:
this.$ = $$[$0-2];
break;
case 26:
this.$ = ast.VarDeclarations($$[$0-1], $$[$0]);
break;
case 27:
this.$ = [ast.VarDeclaration($$[$0])];
break;
case 28:
this.$ = [ast.VarDeclaration($$[$0-2], $$[$0])];
break;
case 29:
$$[$0-3].push(ast.VarDeclaration($$[$0]));
break;
case 30:
$$[$0-5].push(ast.VarDeclaration($$[$0-2], $$[$0]));
break;
case 31:
this.$ = ast.ExecExpression($$[$0-1], $$[$0]);
break;
case 32:
this.$ = ast.ObjectExpression($$[$0-1]);
break;
case 33: case 39:
this.$ = [$$[$0-1]];
break;
case 34: case 40:
this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 36:
this.$ = ast.ObjectThing(ast.Identifier($$[$0-3]), $$[$0]);
break;
case 37:
this.$ = ast.ObjectThing(ast.StringLiteral($$[$0-3]), $$[$0]);
break;
case 38:
this.$ = ast.ArrayExpression($$[$0-1]);
break;
case 42:
this.$ = ast.AnonFuncExpression(null, $$[$0]);
break;
case 43:
this.$ = ast.FuncExpression($$[$0-2], null, $$[$0]);
break;
case 44:
this.$ = ast.AnonFuncExpression($$[$0-3], $$[$0]);
break;
case 45:
this.$ = ast.FuncExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 46:
this.$ = $$[$0-1];
break;
case 48: case 52:
this.$ = [ast.Identifier($$[$0])];
break;
case 49:
$$[$0-3].push(ast.Identifier($$[$0]));
break;
case 50:
this.$ = ast.AnonFuncExpression(null, ast.BlockExpression($$[$0-1]));
break;
case 51:
this.$ = ast.AnonFuncExpression($$[$0-4], ast.BlockExpression($$[$0-1]));
break;
case 53:
$$[$0-2].push(ast.Identifier($$[$0]));
break;
case 55:
this.$ = ast.TernaryExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 56:
this.$ = ast.Break();
break;
case 57:
this.$ = ast.Continue();
break;
case 58:
this.$ = ast.Return();
break;
case 59:
this.$ = ast.Return($$[$0]);
break;
case 60:
this.$ = ast.IfExpression($$[$0-2], $$[$0]);
break;
case 61:
this.$ = ast.ElseIfExpression($$[$0-2], $$[$0]);
break;
case 62:
this.$ = ast.ElseExpression($$[$0]);
break;
case 63:
this.$ = ast.LoopExpression($$[$0]);
break;
case 64:
this.$ = ast.WhileLoop($$[$0-2], $$[$0]);
break;
case 65:
this.$ = ast.ForEachLoop($$[$0-2], $$[$0-4], $$[$0]);
break;
case 66:
this.$ = ast.ForLoop($$[$0-6], $$[$0-4], $$[$0-2], 1, $$[$0]);
break;
case 67:
this.$ = ast.ForLoop($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 70:
this.$ = ast.BlockExpression($$[$0-2]);
break;
case 71:
incDepth();
break;
case 72:
decDepth();
break;
case 74:
this.$ = ast.AssignExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 75:
this.$ = "=";
break;
case 76:
this.$ = "+=";
break;
case 77:
this.$ = "-=";
break;
case 78:
this.$ = "*=";
break;
case 79:
this.$ = "/=";
break;
case 81:
this.$ = ast.LogicExpression("||", $$[$0-2], $$[$0]);
break;
case 82:
this.$ = ast.LogicExpression("&&", $$[$0-2], $$[$0]);
break;
case 83:
this.$ = ast.UnaryExpression("!", $$[$0]);
break;
case 85: case 93:
this.$ = ast.BinaryExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 86:
this.$ = ">";
break;
case 87:
this.$ = "<";
break;
case 88:
this.$ = ">=";
break;
case 89:
this.$ = "<=";
break;
case 90:
this.$ = "===";
break;
case 91:
this.$ = "!==";
break;
case 94:
this.$ = "+";
break;
case 95:
this.$ = "-";
break;
case 96:
this.$ = "*";
break;
case 97:
this.$ = "/";
break;
case 98:
this.$ = "instanceof";
break;
case 100:
this.$ = ast.UnaryExpression("-", $$[$0]);
break;
case 101:
this.$ = ast.NewExpression($$[$0-3]);
break;
case 102:
this.$ = ast.NewExpression($$[$0-5], $$[$0-2]);
break;
case 103:
this.$ = ast.UnaryExpression("typeof", $$[$0]);
break;
case 105:
this.$ = ast.CallExpression($$[$0-3]);
break;
case 106:
this.$ = ast.CallExpression($$[$0-5], $$[$0-2]);
break;
case 107:
this.$ = ast.MemberExpression($$[$0-3], $$[$0-1]);
break;
case 108:
this.$ = ast.PropertyExpression($$[$0-2], ast.Identifier($$[$0]));
break;
case 109:
this.$ = [$$[$0]];
break;
case 110:
$$[$0-3].push($$[$0]);
break;
case 111:
this.$ = ast.Identifier($$[$0]);
break;
case 114: case 115: case 116: case 117:
this.$ = ast.NumericLiteral($$[$0]);
break;
case 118:
this.$ = ast.StringLiteral($$[$0]);
break;
case 119:
this.$ = ast.ThisExpression();
break;
case 120:
this.$ = ast.BooleanLiteral(true);
break;
case 121:
this.$ = ast.BooleanLiteral(false);
break;
case 122:
this.$ = ast.NullLiteral();
break;
case 123:
this.$ = ast.Undefined();
break;
}
},
table: [o([5,12,22,24,25,28,30,33,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$V0,{3:1,4:2,6:3,10:4,106:$V1}),{1:[3]},{5:[1,6]},o($V2,[2,6],{7:7,8:8,9:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,11:19,50:29,51:30,68:37,74:41,94:43,63:44,96:45,85:47,12:$V3,22:$V4,24:$V5,25:$V6,28:$V7,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,77:$Vn,88:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz}),o([5,12,22,24,25,26,28,30,33,35,38,39,41,42,46,47,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$VA,{106:$VB}),o($VC,[2,125]),{1:[2,1]},{8:62,9:63,11:19,12:$V3,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,28:$V7,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V2,$V0,{6:64,10:65,106:$V1}),o($V2,$V0,{6:66,10:67,106:$V1}),o($VD,[2,13]),o($VD,[2,14]),o($VD,[2,15]),o($VD,[2,16]),o($VD,[2,17]),o($VD,[2,18]),o($VD,[2,19]),o($VD,[2,20]),o($VD,[2,21]),o($VE,[2,11]),{8:68,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{23:69,25:$VF},{23:71,25:$VF},o([5,25,26,32,35,37,39,41,47,52,69,70,71,72,73,75,76,79,80,81,82,83,84,87,88,89,90,91,95,106],$VG,{15:72,46:$Vd,48:$Ve}),o($VH,$V0,{6:3,10:4,4:73,106:$V1}),{30:[1,75],49:74},o($VI,$V0,{10:4,34:76,6:77,106:$V1}),o($VJ,$V0,{10:4,40:78,6:79,106:$V1}),{6:80,10:4,25:[1,82],30:[1,81],33:$V0,106:$V1},o($VD,[2,54]),o($VD,[2,73],{52:[1,83],75:$VK,76:$VL}),o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58],{13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,50:29,51:30,68:37,74:41,94:43,63:44,96:45,85:47,8:86,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,77:$Vn,88:$Vo,92:$Vp,93:$Vq,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz}),{33:$VM,43:87},{25:$V6,30:$VN,38:$Va,51:89,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{30:[1,92]},o([5,26,32,35,37,41,47,52,75,76,79,80,81,82,83,84,87,88,89,90,91,106],$VO,{31:93,25:$VP,39:$VQ,69:$VR,70:$VS,71:$VT,72:$VU,73:$VV,95:$VW}),{29:102,30:[1,103]},{25:$V6,30:$VN,38:$Va,51:104,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{6:106,10:4,33:$V0,56:[1,105],106:$V1},o($VX,[2,80],{78:107,79:[1,108],80:[1,109],81:[1,110],82:[1,111],83:[1,112],84:[1,113]}),{25:$V6,30:$VN,38:$Va,51:114,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VY,[2,104]),o($VZ,[2,84],{86:115,87:$V_,88:$V$,89:$V01,90:$V11,91:$V21}),o($VY,[2,112]),o([25,30,38,77,88,92,93,97,98,99,100,101,102,103,104,105],$V0,{10:4,6:121,106:$V1}),o($V31,[2,92]),o($VY,[2,114]),o($VY,[2,115]),o($VY,[2,116]),o($VY,[2,117]),o($VY,[2,118]),o($VY,[2,119]),o($VY,[2,120]),o($VY,[2,121]),o($VY,[2,122]),o($VY,[2,123]),{25:$V6,30:$VN,38:$Va,68:90,85:122,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{25:$V6,30:$VN,38:$Va,68:123,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{25:$V6,30:$VN,38:$Va,68:124,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VC,[2,124]),o($V2,$V0,{6:125,10:126,106:$V1}),o($V2,$V0,{6:127,10:128,106:$V1}),o($V2,[2,3]),o($V41,[2,8],{5:$VA,35:$VA,47:$VA,106:$VB}),o($V2,[2,5]),o($V41,[2,10],{5:$VA,35:$VA,47:$VA,106:$VB}),o($VE,[2,12]),o($VD,[2,22]),o($V51,$V0,{10:4,6:129,106:$V1}),o($VD,[2,23]),o($VD,[2,31]),{47:[1,130]},{32:[1,132],48:[1,131]},o($V61,[2,52]),{35:[1,133]},{30:[1,135],35:[2,35],36:134,38:[1,136]},{41:[1,137]},{8:138,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,41:[2,41],42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{33:$VM,43:139},{6:140,10:4,25:[1,141],33:$V0,106:$V1},o($V71,$V0,{10:4,6:142,106:$V1}),o($V81,$V0,{10:4,6:143,106:$V1}),{25:$V6,30:$VN,38:$Va,51:144,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{25:$V6,30:$VN,38:$Va,51:145,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VD,[2,59]),o($VD,[2,63]),o([12,22,24,25,28,30,33,35,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105,106],[2,71],{66:146}),{6:147,10:4,33:$V0,75:$VK,76:$VL,106:$V1},o($V31,$VO,{25:$VP,39:$VQ,95:$VW}),o([5,25,26,32,33,35,37,39,41,47,52,64,65,75,76,79,80,81,82,83,84,87,88,89,90,91,95,106],$VG),{61:[1,148]},{8:149,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V51,$V0,{10:4,6:150,106:$V1}),{8:151,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{30:[1,152]},o($V81,[2,75]),o($V81,[2,76]),o($V81,[2,77]),o($V81,[2,78]),o($V81,[2,79]),o($VE,[2,26],{32:[1,153]}),o($V91,[2,27],{31:154,69:$VR,70:$VS,71:$VT,72:$VU,73:$VV}),{6:155,10:4,33:$V0,75:$VK,76:$VL,106:$V1},{25:$V6,30:$VN,38:$Va,51:156,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{33:$VM,43:157},{25:$V6,30:$VN,38:$Va,63:158,68:90,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($Va1,[2,86]),o($Va1,[2,87]),o($Va1,[2,88]),o($Va1,[2,89]),o($Va1,[2,90]),o($Va1,[2,91]),o($VX,[2,83]),{25:$V6,30:$VN,38:$Va,68:90,85:159,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($Va1,[2,94]),o($Va1,[2,95]),o($Va1,[2,96]),o($Va1,[2,97]),o($Va1,[2,98]),{25:$V6,30:$VN,38:$Va,51:160,63:44,68:90,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V31,[2,100]),{25:[1,161],39:$VQ,95:$VW},o($V31,[2,103],{25:$VP,39:$VQ,95:$VW}),o($V2,[2,2]),o($V41,[2,7],{5:$VA,35:$VA,47:$VA,106:$VB}),o($V2,[2,4]),o($V41,[2,9],{5:$VA,35:$VA,47:$VA,106:$VB}),{8:164,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,26:[1,162],27:163,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VD,[2,50]),{46:[1,165]},{30:[1,166]},o($VD,[2,32]),{6:167,10:4,32:[1,168],35:$V0,106:$V1},{37:[1,169]},{37:[1,170]},o([5,26,32,33,35,37,41,47,106],[2,38]),{6:171,10:4,32:[1,172],41:$V0,106:$V1},o($VD,[2,42]),{33:$VM,43:173},o($V71,$V0,{10:4,6:174,106:$V1}),{26:$Vb1,30:$Vc1,44:175,45:176},{8:178,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VX,[2,81]),o($VX,[2,82]),o([12,22,24,25,28,30,33,35,38,39,42,46,48,53,54,55,56,57,58,59,60,77,88,92,93,97,98,99,100,101,102,103,104,105],$V0,{6:3,10:4,4:179,106:$V1}),{33:$VM,43:180},{17:183,25:$V6,30:$VN,38:$Va,39:$Vb,62:181,63:182,68:90,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VD,[2,74]),{8:164,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,26:[1,184],27:185,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{41:[1,186]},o($VY,[2,108]),{6:187,10:4,30:$V0,106:$V1},{8:188,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{33:$VM,43:189},{6:190,10:4,33:$V0,75:$VK,76:$VL,106:$V1},o($VD,[2,62]),o($VZ,[2,85],{86:115,87:$V_,88:$V$,89:$V01,90:$V11,91:$V21}),o($V31,[2,93]),{6:191,10:4,26:$V0,75:$VK,76:$VL,106:$V1},o($V51,$V0,{10:4,6:192,106:$V1}),o($VD,[2,24]),{6:193,10:4,26:$V0,32:$Vd1,106:$V1},o($Ve1,[2,109]),o($VH,$V0,{6:3,10:4,4:195,106:$V1}),o($V61,[2,53]),{35:[2,33]},o($VI,$V0,{10:4,6:77,34:196,106:$V1}),o($V81,$V0,{10:4,6:197,106:$V1}),o($V81,$V0,{10:4,6:198,106:$V1}),{41:[2,39]},o($VJ,$V0,{10:4,6:79,40:199,106:$V1}),o($VD,[2,43]),{26:$Vb1,30:$Vc1,44:200,45:176},{26:[1,201]},{6:202,10:4,26:$V0,32:[1,203],106:$V1},o($Ve1,[2,48]),{37:[1,204]},{35:[2,72],67:205},o($VD,[2,64]),{6:206,10:4,33:$V0,106:$V1},o($Vf1,[2,68],{86:115,64:[1,207],87:$V_,88:$V$,89:$V01,90:$V11,91:$V21}),o($Vf1,[2,69]),o($VY,$Vg1),{6:208,10:4,26:$V0,32:$Vd1,106:$V1},o($VY,[2,107]),{30:[1,209]},o($V91,[2,28]),o($VD,[2,60]),{33:$VM,43:210},{26:[1,211]},{8:164,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,26:[1,212],27:213,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{26:[1,214]},o($V81,$V0,{10:4,6:215,106:$V1}),{47:[1,216]},{35:[2,34]},{8:217,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{8:218,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{41:[2,40]},{26:[1,219]},{6:220,10:4,33:$V0,106:$V1},{26:[2,46]},{6:221,10:4,30:$V0,106:$V1},o($V81,$V0,{10:4,6:222,106:$V1}),{35:[1,223]},{33:$VM,43:224},{25:$V6,30:$VN,38:$Va,63:225,68:90,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{26:[1,226]},o($V91,[2,29],{31:227,69:$VR,70:$VS,71:$VT,72:$VU,73:$VV}),o($VD,[2,61]),o($VY,[2,113]),o($V31,[2,101],{25:$Vg1,39:$Vg1,95:$Vg1}),{6:228,10:4,26:$V0,32:$Vd1,106:$V1},o($VD,[2,25]),{8:229,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VD,[2,51]),o($Vh1,[2,36]),o($Vh1,[2,37]),{6:230,10:4,33:$V0,106:$V1},{33:$VM,43:231},{30:[1,232]},{8:233,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($VD,[2,70]),o($VD,[2,65]),{6:234,10:4,33:$V0,65:[1,235],86:115,87:$V_,88:$V$,89:$V01,90:$V11,91:$V21,106:$V1},o($VY,$Vi1),{8:236,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V4,24:$V5,25:$V6,30:$V8,33:$V9,38:$Va,39:$Vb,42:$Vc,46:$Vd,48:$Ve,50:29,51:30,53:$Vf,54:$Vg,55:$Vh,56:$Vi,57:$Vj,58:$Vk,59:$Vl,60:$Vm,63:44,68:37,74:41,77:$Vn,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},{26:[1,237]},o($Ve1,[2,110]),{33:$VM,43:238},o($VD,[2,44]),o($Ve1,[2,49]),o($VD,[2,55]),{33:$VM,43:239},{25:$V6,30:$VN,38:$Va,63:240,68:90,85:47,88:$Vo,92:$Vp,93:$Vq,94:43,96:45,97:$Vr,98:$Vs,99:$Vt,100:$Vu,101:$Vv,102:$Vw,103:$Vx,104:$Vy,105:$Vz},o($V91,[2,30]),o($V31,[2,102],{25:$Vi1,39:$Vi1,95:$Vi1}),o($VD,[2,45]),o($VD,[2,66]),{6:241,10:4,33:$V0,86:115,87:$V_,88:$V$,89:$V01,90:$V11,91:$V21,106:$V1},{33:$VM,43:242},o($VD,[2,67])],
defaultActions: {6:[2,1],167:[2,33],171:[2,39],196:[2,34],199:[2,40],202:[2,46]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ast = require("./ast");
	
	// Depth tracking
	var depth = 0;
	
	function incDepth() {
		depth += 1;
	}
	
	function decDepth() {
		depth -= 1;
	}
	
	var top_level_if = [];
	
	function processTopLevelExpression(e, nameAnon) {
		// Move if-else/else into alternate slots
		if(e._if) {
			e._depth = depth;
			top_level_if.push(e);
			return e;
		}
		if(e._if_else || e._else) {
			var top;
			if(top_level_if.length === 0 || (top = top_level_if[top_level_if.length-1])._depth !== depth) {
				throw "else-if/else found before if";
			}
			
			top.alternate = e;
			if(e._else) {
				top_level_if.pop();
			}
			return null;
		}
		
		//console.log("Processing top level thing");
		while(top_level_if.length > 0 && top_level_if[top_level_if.length-1]._depth >= depth) {
			top_level_if.pop();
		}
		
		// Wrap or declarize functions
		if(e._anon) {
			// Wrap non-named anonymous functions
			if(nameAnon) {
				return ast.toFuncDeclaration(e, ast.getUID("anon"));
			}
			else {
				return ast.ExecExpression(null, e);
			}
		}
		if(e._func) {
			// Change named functions to declarations
			return ast.toFuncDeclaration(e);
		}
		// Wrap plain expressions
		if(e._expr) {
			return ast.Expression(e);
		}
		
		return e;
	}
	
	function noNullPush(list, thing) {
		if(thing !== undefined && thing !== null) {
			list.push(thing);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	if(!(yy.commentDepth)) {
		yy.commentDepth = 0;
	}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore comments */
break;
case 1:/* Ignore comments */
break;
case 2:yy.commentDepth++; this.begin("comment");
break;
case 3:yy.commentDepth++;
break;
case 4:yy.commentDepth--; if(yy.commentDepth === 0) {this.popState();}
break;
case 5:return "NEWLINE";
break;
case 6:/* Ignore whitespace */
break;
case 7:this.begin("dstring"); string = "";
break;
case 8:this.popState(); yy_.yytext = string; return "STRING";
break;
case 9:this.begin("esc");
break;
case 10:string += yy_.yytext;
break;
case 11:this.begin("sstring"); string = "";
break;
case 12:this.popState(); yy_.yytext = string; return "STRING";
break;
case 13:this.begin("esc");
break;
case 14:string += yy_.yytext;
break;
case 15:string += "\n"; this.popState();
break;
case 16:string += "\r"; this.popState();
break;
case 17:string += "\t"; this.popState();
break;
case 18:string += "\0"; this.popState();
break;
case 19:string += "\'"; this.popState();
break;
case 20:string += "\""; this.popState();
break;
case 21:return "HEXNUMBER";
break;
case 22:return "OCTALNUMBER";
break;
case 23:return "BINARYNUMBER";
break;
case 24:return "NUMBER";
break;
case 25:this.begin("anonfunc");	return "LEXEC";
break;
case 26:this.popState();			return "REXEC";
break;
case 27:return "RANGE";
break;
case 28:return "PLUSASSIGN";
break;
case 29:return "MINUSASSIGN";
break;
case 30:return "MULTIPLAYASSIGN";
break;
case 31:return "DIVIDEASSIGN";
break;
case 32:return "EQUALS";
break;
case 33:return "NOTEQUALS";
break;
case 34:return "GTE";
break;
case 35:return "LTE";
break;
case 36:return "GT";
break;
case 37:return "LT";
break;
case 38:return "AND";
break;
case 39:return "OR";
break;
case 40:return "NOT";
break;
case 41:return "MULTIPLY";
break;
case 42:return "DIVIDE";
break;
case 43:return "MINUS";
break;
case 44:return "PLUS";
break;
case 45:return "ASSIGN";
break;
case 46:return "BITOR";
break;
case 47:return "BITAND";
break;
case 48:return "LBRACKET";
break;
case 49:return "RBRACKET";
break;
case 50:return "LSQUARE";
break;
case 51:return "RSQUARE";
break;
case 52:return "LPAREN";
break;
case 53:return "RPAREN";
break;
case 54:return "DOT";
break;
case 55:return "COMMA";
break;
case 56:return "COLON";
break;
case 57:return "TERNARY";
break;
case 58:return "TRUE";
break;
case 59:return "FALSE";
break;
case 60:return "NULL";
break;
case 61:return "UNDEFINED";
break;
case 62:return "FUNCTION";
break;
case 63:return "FUNCTION";
break;
case 64:return "FUNCTION";
break;
case 65:return "VARIABLE";
break;
case 66:return "VARIABLE";
break;
case 67:return "IF";
break;
case 68:return "ELSE";
break;
case 69:return "LOOP";
break;
case 70:return "WHILE";
break;
case 71:return "FOR";
break;
case 72:return "IN";
break;
case 73:return "STEP";
break;
case 74:return "STEP";
break;
case 75:return "RETURN";
break;
case 76:return "BREAK";
break;
case 77:return "CONTINUE";
break;
case 78:return "PRINT";
break;
case 79:return "ERROR";
break;
case 80:return "THIS";
break;
case 81:return "NEW";
break;
case 82:return "INSTANCEOF";
break;
case 83:return "TYPEOF";
break;
case 84:return "THROW";
break;
case 85:return "IDENTIFIER";
break;
case 86:return "EOF";
break;
case 87:return "INVALID";
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:\/\*)/,/^(?:.*?(\/\*))/,/^(?:.*?(\*\/))/,/^(?:([\n\r])+)/,/^(?:\s+)/,/^(?:")/,/^(?:")/,/^(?:\\)/,/^(?:[^"\\]*)/,/^(?:')/,/^(?:')/,/^(?:\\)/,/^(?:[^'\\]*)/,/^(?:[n])/,/^(?:[r])/,/^(?:[t])/,/^(?:[0])/,/^(?:['])/,/^(?:["])/,/^(?:0x([0-9a-fA-F]([_]?[0-9a-fA-F])*)\b)/,/^(?:0o([0-7]([_]?[0-7])*)\b)/,/^(?:0b([01]([_]?[01])*)\b)/,/^(?:(([0-9]([_]?[0-9])*)([\.][0-9]+)?|[\.][0-9]+)\b)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\.\.)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:\|)/,/^(?:&)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:func\b)/,/^(?:fun\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:step\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:print\b)/,/^(?:error\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:instanceof\b)/,/^(?:typeof\b)/,/^(?:throw\b)/,/^(?:([a-zA-Z_$][a-zA-Z0-9_$]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"anonfunc":{"rules":[0,1,2,5,6,7,11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true},"comment":{"rules":[3,4],"inclusive":false},"esc":{"rules":[15,16,17,18,19,20],"inclusive":false},"sstring":{"rules":[12,13,14],"inclusive":false},"dstring":{"rules":[8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,2,5,6,7,11,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
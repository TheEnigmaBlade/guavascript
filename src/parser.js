/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,114],$V1=[1,5],$V2=[5,31,44],$V3=[1,20],$V4=[1,21],$V5=[1,43],$V6=[1,19],$V7=[1,22],$V8=[1,24],$V9=[1,49],$Va=[1,25],$Vb=[1,26],$Vc=[1,23],$Vd=[1,29],$Ve=[1,30],$Vf=[1,31],$Vg=[1,36],$Vh=[1,37],$Vi=[1,32],$Vj=[1,33],$Vk=[1,34],$Vl=[1,39],$Vm=[1,54],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[2,113],$Vw=[1,55],$Vx=[5,20,22,23,24,26,27,29,31,35,36,38,39,43,44,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98,99],$Vy=[5,24,31,33,34,38,44,99],$Vz=[1,61],$VA=[2,99],$VB=[20,22,23,26,27,29,35,36,39,43,44,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$VC=[27,31,35],$VD=[20,22,23,26,27,29,35,36,38,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$VE=[1,74],$VF=[1,75],$VG=[1,78],$VH=[1,81],$VI=[2,90],$VJ=[1,84],$VK=[1,85],$VL=[1,87],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,86],$VR=[5,24,29,31,33,34,38,44,49,72,73,99],$VS=[5,23,24,29,31,33,34,36,38,44,49,61,62,66,67,68,69,70,72,73,76,77,78,79,80,81,84,85,86,87,89,99],$VT=[5,24,29,31,33,34,38,44,49,72,73,76,77,78,79,80,81,99],$VU=[1,104],$VV=[1,105],$VW=[1,106],$VX=[1,107],$VY=[5,24,29,31,33,34,38,44,49,61,62,72,73,76,77,78,79,80,81,84,85,86,87,99],$VZ=[20,22,23,26,27,29,35,36,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$V_=[20,22,23,24,26,27,29,35,36,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$V$=[24,27],$V01=[23,27,35,85,91,92,93,94,95,96,97,98],$V11=[33,45],$V21=[2,39],$V31=[1,159],$V41=[1,173],$V51=[24,33,99],$V61=[29,99],$V71=[31,33,99];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"w":6,"expression_list":7,"expression":8,"W":9,"declaration":10,"alias_call_expressions":11,"execution_expression":12,"anon_expression":13,"object_expression":14,"array_expression":15,"function_expression":16,"control_expression":17,"loop_expression":18,"assignment_expression":19,"PRINT":20,"alias_call":21,"ERROR":22,"LPAREN":23,"RPAREN":24,"call_arguments":25,"VARIABLE":26,"IDENTIFIER":27,"assignment_operator":28,"LBRACKET":29,"object_contents":30,"RBRACKET":31,"object_content_thing":32,"COMMA":33,"COLON":34,"STRING":35,"LSQUARE":36,"array_contents":37,"RSQUARE":38,"FUNCTION":39,"block_expression":40,"function_arguments_opt":41,"function_arguments":42,"LEXEC":43,"REXEC":44,"BITOR":45,"anon_arguments":46,"if_control_expression":47,"conditional_expression":48,"TERNARY":49,"BREAK":50,"CONTINUE":51,"RETURN":52,"IF":53,"ELSE":54,"LOOP":55,"WHILE":56,"FOR":57,"IN":58,"iterable":59,"op_expression":60,"RANGE":61,"STEP":62,"inc_depth":63,"dec_depth":64,"post_expression":65,"ASSIGN":66,"PLUSASSIGN":67,"MINUSASSIGN":68,"MULTIPLYASSIGN":69,"DIVIDEASSIGN":70,"compare_expression":71,"OR":72,"AND":73,"NOT":74,"compare_operator":75,"GT":76,"LT":77,"GTE":78,"LTE":79,"EQUALS":80,"NOTEQUALS":81,"unary_expression":82,"op_operator":83,"PLUS":84,"MINUS":85,"MULTIPLY":86,"DIVIDE":87,"primary_expression":88,"DOT":89,"constant":90,"NUMBER":91,"HEXNUMBER":92,"OCTALNUMBER":93,"BINARYNUMBER":94,"TRUE":95,"FALSE":96,"NULL":97,"UNDEFINED":98,"NEWLINE":99,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PRINT",22:"ERROR",23:"LPAREN",24:"RPAREN",26:"VARIABLE",27:"IDENTIFIER",29:"LBRACKET",31:"RBRACKET",33:"COMMA",34:"COLON",35:"STRING",36:"LSQUARE",38:"RSQUARE",39:"FUNCTION",43:"LEXEC",44:"REXEC",45:"BITOR",49:"TERNARY",50:"BREAK",51:"CONTINUE",52:"RETURN",53:"IF",54:"ELSE",55:"LOOP",56:"WHILE",57:"FOR",58:"IN",61:"RANGE",62:"STEP",66:"ASSIGN",67:"PLUSASSIGN",68:"MINUSASSIGN",69:"MULTIPLYASSIGN",70:"DIVIDEASSIGN",72:"OR",73:"AND",74:"NOT",76:"GT",77:"LT",78:"GTE",79:"LTE",80:"EQUALS",81:"NOTEQUALS",84:"PLUS",85:"MINUS",86:"MULTIPLY",87:"DIVIDE",89:"DOT",91:"NUMBER",92:"HEXNUMBER",93:"OCTALNUMBER",94:"BINARYNUMBER",95:"TRUE",96:"FALSE",97:"NULL",98:"UNDEFINED",99:"NEWLINE"},
productions_: [0,[3,2],[4,4],[4,3],[4,1],[7,3],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[11,2],[11,2],[21,3],[21,5],[10,2],[10,4],[12,2],[14,3],[30,3],[30,4],[30,1],[32,4],[32,4],[15,3],[37,3],[37,4],[37,1],[16,3],[16,4],[16,7],[16,8],[41,2],[41,0],[42,1],[42,4],[13,3],[13,6],[46,1],[46,3],[17,1],[17,7],[17,1],[17,1],[17,1],[17,2],[47,4],[47,5],[47,3],[18,2],[18,4],[18,6],[18,8],[18,10],[59,1],[59,1],[40,5],[63,0],[64,0],[19,1],[19,3],[28,1],[28,1],[28,1],[28,1],[28,1],[48,1],[48,3],[48,3],[48,2],[71,1],[71,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[60,1],[60,3],[83,1],[83,1],[83,1],[83,1],[82,1],[82,2],[65,1],[65,4],[65,6],[65,4],[65,3],[25,1],[25,4],[88,1],[88,1],[88,5],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[90,1],[9,2],[9,1],[6,1],[6,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ast.Program($$[$0-1]);
break;
case 2:
this.$ = $$[$0-2]; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 3: case 6:
this.$ = []; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 4: case 19: case 27: case 33: case 39:
this.$ = [];
break;
case 5:
noNullPush($$[$0-2], processTopLevelExpression($$[$0-1]));
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 46: case 65: case 72: case 76: case 84: case 90: case 92: case 100:
this.$ = $$[$0];
break;
case 17:
this.$ = ast.AliasPrint($$[$0]);
break;
case 18:
this.$ = ast.AliasError($$[$0]);
break;
case 20:
this.$ = $$[$0-2];
break;
case 21:
this.$ = ast.VarDeclaration($$[$0-1], $$[$0]);
break;
case 22:
this.$ = ast.VarDeclaration($$[$0-3], $$[$0-2], $$[$0]);
break;
case 23:
this.$ = ast.ExecExpression($$[$0-1], $$[$0]);
break;
case 24:
this.$ = ast.ObjectExpression($$[$0-1]);
break;
case 25: case 31:
this.$ = [$$[$0-1]];
break;
case 26: case 32:
this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 28:
this.$ = ast.ObjectThing(ast.Identifier($$[$0-3]), $$[$0]);
break;
case 29:
this.$ = ast.ObjectThing(ast.StringLiteral($$[$0-3]), $$[$0]);
break;
case 30:
this.$ = ast.ArrayExpression($$[$0-1]);
break;
case 34:
this.$ = ast.AnonFuncExpression(null, $$[$0]);
break;
case 35:
this.$ = ast.FuncExpression($$[$0-2], null, $$[$0]);
break;
case 36:
this.$ = ast.AnonFuncExpression($$[$0-3], $$[$0]);
break;
case 37:
this.$ = ast.FuncExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 38:
this.$ = $$[$0-1];
break;
case 40: case 44:
this.$ = [ast.Identifier($$[$0])];
break;
case 41:
$$[$0-3].push(ast.Identifier($$[$0]));
break;
case 42:
this.$ = ast.AnonFuncExpression(null, $$[$0-1]);
break;
case 43:
this.$ = ast.AnonFuncExpression($$[$0-4], $$[$0-2]);
break;
case 45:
$$[$0-2].push(ast.Identifier($$[$0]));
break;
case 47:
this.$ = ast.TernaryExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 48:
this.$ = ast.Break();
break;
case 49:
this.$ = ast.Continue();
break;
case 50:
this.$ = ast.Return();
break;
case 51:
this.$ = ast.Return($$[$0]);
break;
case 52:
this.$ = ast.IfExpression($$[$0-2], $$[$0]);
break;
case 53:
this.$ = ast.ElseIfExpression($$[$0-2], $$[$0]);
break;
case 54:
this.$ = ast.ElseExpression($$[$0]);
break;
case 55:
this.$ = ast.LoopExpression($$[$0]);
break;
case 56:
this.$ = ast.WhileLoop($$[$0-2], $$[$0]);
break;
case 57:
this.$ = ast.ForEachLoop($$[$0-2], $$[$0-4], $$[$0]);
break;
case 58:
this.$ = ast.ForLoop($$[$0-6], $$[$0-4], $$[$0-2], 1, $$[$0]);
break;
case 59:
this.$ = ast.ForLoop($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 62:
this.$ = ast.BlockExpression($$[$0-2]);
break;
case 63:
incDepth();
break;
case 64:
decDepth();
break;
case 66:
this.$ = ast.AssignExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 67:
this.$ = "=";
break;
case 68:
this.$ = "+=";
break;
case 69:
this.$ = "-=";
break;
case 70:
this.$ = "*=";
break;
case 71:
this.$ = "/=";
break;
case 73:
this.$ = ast.LogicExpression("||", $$[$0-2], $$[$0]);
break;
case 74:
this.$ = ast.LogicExpression("&&", $$[$0-2], $$[$0]);
break;
case 75:
this.$ = ast.UnaryExpression("!", $$[$0]);
break;
case 77: case 85:
this.$ = ast.BinaryExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 78:
this.$ = ">";
break;
case 79:
this.$ = "<";
break;
case 80:
this.$ = ">=";
break;
case 81:
this.$ = "<=";
break;
case 82:
this.$ = "===";
break;
case 83:
this.$ = "!==";
break;
case 86:
this.$ = "+";
break;
case 87:
this.$ = "-";
break;
case 88:
this.$ = "*";
break;
case 89:
this.$ = "/";
break;
case 91:
this.$ = ast.UnaryExpression("-", $$[$0]);
break;
case 93:
this.$ = ast.CallExpression($$[$0-3]);
break;
case 94:
this.$ = ast.CallExpression($$[$0-5], $$[$0-2]);
break;
case 95:
this.$ = ast.MemberExpression($$[$0-3], $$[$0-1]);
break;
case 96:
this.$ = ast.PropertyExpression($$[$0-2], ast.Identifier($$[$0]));
break;
case 97:
this.$ = [$$[$0]];
break;
case 98:
$$[$0-3].push($$[$0]);
break;
case 99:
this.$ = ast.Identifier($$[$0]);
break;
case 101:
this.$ = $$[$0-3];
break;
case 102: case 103: case 104: case 105:
this.$ = ast.NumericLiteral($$[$0]);
break;
case 106:
this.$ = ast.StringLiteral($$[$0]);
break;
case 107:
this.$ = ast.BooleanLiteral(true);
break;
case 108:
this.$ = ast.BooleanLiteral(false);
break;
case 109:
this.$ = ast.NullLiteral();
break;
case 110:
this.$ = ast.Undefined();
break;
}
},
table: [o([5,20,22,23,26,27,29,35,36,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$V0,{3:1,4:2,6:3,9:4,99:$V1}),{1:[3]},{5:[1,6]},o($V2,[2,4],{7:7,8:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,47:27,48:28,65:35,71:38,88:40,60:41,90:42,82:44,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,74:$Vl,85:$Vm,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu}),o([5,20,22,23,24,26,27,29,31,35,36,38,39,43,44,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$Vv,{99:$Vw}),o($Vx,[2,112]),{1:[2,1]},{8:56,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($V2,$V0,{6:57,9:58,99:$V1}),o($Vy,[2,7]),o($Vy,[2,8]),o($Vy,[2,9]),o($Vy,[2,10]),o($Vy,[2,11]),o($Vy,[2,12]),o($Vy,[2,13]),o($Vy,[2,14]),o($Vy,[2,15]),o($Vy,[2,16]),{27:[1,59]},{21:60,23:$Vz},{21:62,23:$Vz},o([5,23,24,31,33,34,36,38,44,49,66,67,68,69,70,72,73,76,77,78,79,80,81,84,85,86,87,89,99],$VA,{13:63,43:$Vc}),o($VB,$V0,{6:3,9:4,4:64,45:[1,65],99:$V1}),o($VC,$V0,{9:4,30:66,6:67,99:$V1}),o($VD,$V0,{9:4,37:68,6:69,99:$V1}),{6:70,9:4,23:[1,72],27:[1,71],29:$V0,99:$V1},o($Vy,[2,46]),o($Vy,[2,65],{49:[1,73],72:$VE,73:$VF}),o($Vy,[2,48]),o($Vy,[2,49]),o($Vy,[2,50],{10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,47:27,48:28,65:35,71:38,88:40,60:41,90:42,82:44,8:76,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,74:$Vl,85:$Vm,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu}),{29:$VG,40:77},{23:$V5,27:$VH,35:$V9,48:79,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{27:[1,82]},o([5,24,31,33,34,38,44,49,72,73,76,77,78,79,80,81,84,85,86,87,99],$VI,{28:83,23:$VJ,36:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP,89:$VQ}),{23:$V5,27:$VH,35:$V9,48:92,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{6:94,9:4,29:$V0,53:[1,93],99:$V1},o($VR,[2,72],{75:95,76:[1,96],77:[1,97],78:[1,98],79:[1,99],80:[1,100],81:[1,101]}),{23:$V5,27:$VH,35:$V9,48:102,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($VS,[2,92]),o($VT,[2,76],{83:103,84:$VU,85:$VV,86:$VW,87:$VX}),o($VS,[2,100]),o([23,27,35,74,85,91,92,93,94,95,96,97,98],$V0,{9:4,6:108,99:$V1}),o($VY,[2,84]),o($VS,[2,102]),o($VS,[2,103]),o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),o($VS,[2,107]),o($VS,[2,108]),o($VS,[2,109]),o($VS,[2,110]),{23:$V5,27:$VH,35:$V9,65:80,82:109,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vx,[2,111]),o($V2,$V0,{6:110,9:111,99:$V1}),o($V2,[2,3]),o($VZ,[2,6],{5:$Vv,31:$Vv,44:$Vv,99:$Vw}),o($Vy,[2,21],{28:112,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($Vy,[2,17]),o($V_,$V0,{9:4,6:113,99:$V1}),o($Vy,[2,18]),o($Vy,[2,23]),{44:[1,114]},{27:[1,116],46:115},{31:[1,117]},{27:[1,119],31:[2,27],32:118,35:[1,120]},{38:[1,121]},{8:122,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,38:[2,33],39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{29:$VG,40:123},{6:124,9:4,23:[1,125],29:$V0,99:$V1},o($V$,$V0,{9:4,6:126,99:$V1}),o($VZ,$V0,{9:4,6:127,99:$V1}),{23:$V5,27:$VH,35:$V9,48:128,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{23:$V5,27:$VH,35:$V9,48:129,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,51]),o($Vy,[2,55]),o([20,22,23,26,27,29,31,35,36,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98,99],[2,63],{63:130}),{6:131,9:4,29:$V0,72:$VE,73:$VF,99:$V1},o($VY,$VI,{23:$VJ,36:$VK,89:$VQ}),o([5,23,24,29,31,33,34,36,38,44,49,61,62,72,73,76,77,78,79,80,81,84,85,86,87,89,99],$VA),{58:[1,132]},{8:133,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($V_,$V0,{9:4,6:134,99:$V1}),{8:135,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{27:[1,136]},o($VZ,[2,67]),o($VZ,[2,68]),o($VZ,[2,69]),o($VZ,[2,70]),o($VZ,[2,71]),{6:137,9:4,29:$V0,72:$VE,73:$VF,99:$V1},{23:$V5,27:$VH,35:$V9,48:138,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{29:$VG,40:139},{23:$V5,27:$VH,35:$V9,60:140,65:80,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($V01,[2,78]),o($V01,[2,79]),o($V01,[2,80]),o($V01,[2,81]),o($V01,[2,82]),o($V01,[2,83]),o($VR,[2,75]),{23:$V5,27:$VH,35:$V9,65:80,82:141,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($V01,[2,86]),o($V01,[2,87]),o($V01,[2,88]),o($V01,[2,89]),{23:$V5,27:$VH,35:$V9,48:142,60:41,65:80,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($VY,[2,91]),o($V2,[2,2]),o($VZ,[2,5],{5:$Vv,31:$Vv,44:$Vv,99:$Vw}),{8:143,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{8:146,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,24:[1,144],25:145,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,42]),{33:[1,148],45:[1,147]},o($V11,[2,44]),o($Vy,[2,24]),{6:149,9:4,31:$V0,33:[1,150],99:$V1},{34:[1,151]},{34:[1,152]},o([5,24,29,31,33,34,38,44,99],[2,30]),{6:153,9:4,33:[1,154],38:$V0,99:$V1},o($Vy,[2,34]),{29:$VG,40:155},o($V$,$V0,{9:4,6:156,99:$V1}),{24:$V21,27:$V31,41:157,42:158},{8:160,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($VR,[2,73]),o($VR,[2,74]),o([20,22,23,26,27,29,31,35,36,39,43,50,51,52,53,54,55,56,57,74,85,91,92,93,94,95,96,97,98],$V0,{6:3,9:4,4:161,99:$V1}),{29:$VG,40:162},{15:165,23:$V5,27:$VH,35:$V9,36:$Va,59:163,60:164,65:80,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,66]),{8:146,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,24:[1,166],25:167,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{38:[1,168]},o($VS,[2,96]),{29:$VG,40:169},{6:170,9:4,29:$V0,72:$VE,73:$VF,99:$V1},o($Vy,[2,54]),o($VT,[2,77],{83:103,84:$VU,85:$VV,86:$VW,87:$VX}),o($VY,[2,85]),{6:171,9:4,24:$V0,72:$VE,73:$VF,99:$V1},o($Vy,[2,22]),o($Vy,[2,19]),{6:172,9:4,24:$V0,33:$V41,99:$V1},o($V51,[2,97]),o($VB,$V0,{6:3,9:4,4:174,99:$V1}),{27:[1,175]},{31:[2,25]},o($VC,$V0,{9:4,6:67,30:176,99:$V1}),o($VZ,$V0,{9:4,6:177,99:$V1}),o($VZ,$V0,{9:4,6:178,99:$V1}),{38:[2,31]},o($VD,$V0,{9:4,6:69,37:179,99:$V1}),o($Vy,[2,35]),{24:$V21,27:$V31,41:180,42:158},{24:[1,181]},{6:182,9:4,24:$V0,33:[1,183],99:$V1},o($V51,[2,40]),{34:[1,184]},{31:[2,64],64:185},o($Vy,[2,56]),{6:186,9:4,29:$V0,99:$V1},o($V61,[2,60],{83:103,61:[1,187],84:$VU,85:$VV,86:$VW,87:$VX}),o($V61,[2,61]),o($VS,[2,93]),{6:188,9:4,24:$V0,33:$V41,99:$V1},o($VS,[2,95]),o($Vy,[2,52]),{29:$VG,40:189},{24:[1,190]},{24:[1,191]},o($VZ,$V0,{9:4,6:192,99:$V1}),{44:[1,193]},o($V11,[2,45]),{31:[2,26]},{8:194,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{8:195,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{38:[2,32]},{24:[1,196]},{6:197,9:4,29:$V0,99:$V1},{24:[2,38]},{6:198,9:4,27:$V0,99:$V1},o($VZ,$V0,{9:4,6:199,99:$V1}),{31:[1,200]},{29:$VG,40:201},{23:$V5,27:$VH,35:$V9,60:202,65:80,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},{24:[1,203]},o($Vy,[2,53]),o($VS,[2,101]),o($Vy,[2,20]),{8:204,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,43]),o($V71,[2,28]),o($V71,[2,29]),{6:205,9:4,29:$V0,99:$V1},{29:$VG,40:206},{27:[1,207]},{8:208,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:18,20:$V3,22:$V4,23:$V5,26:$V6,27:$V7,29:$V8,35:$V9,36:$Va,39:$Vb,43:$Vc,47:27,48:28,50:$Vd,51:$Ve,52:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,60:41,65:35,71:38,74:$Vl,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,62]),o($Vy,[2,57]),{6:209,9:4,29:$V0,62:[1,210],83:103,84:$VU,85:$VV,86:$VW,87:$VX,99:$V1},o($VS,[2,94]),o($V51,[2,98]),{29:$VG,40:211},o($Vy,[2,36]),o($V51,[2,41]),o($Vy,[2,47]),{29:$VG,40:212},{23:$V5,27:$VH,35:$V9,60:213,65:80,82:44,85:$Vm,88:40,90:42,91:$Vn,92:$Vo,93:$Vp,94:$Vq,95:$Vr,96:$Vs,97:$Vt,98:$Vu},o($Vy,[2,37]),o($Vy,[2,58]),{6:214,9:4,29:$V0,83:103,84:$VU,85:$VV,86:$VW,87:$VX,99:$V1},{29:$VG,40:215},o($Vy,[2,59])],
defaultActions: {6:[2,1],149:[2,25],153:[2,31],176:[2,26],179:[2,32],182:[2,38]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ast = require("./ast");
	
	// Depth tracking
	var depth = 0;
	
	function incDepth() {
		depth += 1;
	}
	
	function decDepth() {
		depth -= 1;
	}
	
	var top_level_if = [];
	
	function processTopLevelExpression(e, nameAnon) {
		// Move if-else/else into alternate slots
		if(e._if) {
			e._depth = depth;
			top_level_if.push(e);
			return e;
		}
		if(e._if_else || e._else) {
			var top;
			if(top_level_if.length === 0 || (top = top_level_if[top_level_if.length-1])._depth !== depth) {
				throw "else-if/else found before if";
			}
			
			top.alternate = e;
			if(e._else) {
				top_level_if.pop();
			}
			return null;
		}
		
		//console.log("Processing top level thing");
		while(top_level_if.length > 0 && top_level_if[top_level_if.length-1]._depth >= depth) {
			top_level_if.pop();
		}
		
		// Wrap or declarize functions
		if(e._anon) {
			// Wrap non-named anonymous functions
			if(nameAnon) {
				return ast.toFuncDeclaration(e, ast.getUID("anon"));
			}
			else {
				return ast.ExecExpression(null, e);
			}
		}
		if(e._func) {
			// Change named functions to declarations
			return ast.toFuncDeclaration(e);
		}
		// Wrap plain expressions
		if(e._expr) {
			return ast.Expression(e);
		}
		
		return e;
	}
	
	function noNullPush(list, thing) {
		if(thing !== undefined && thing !== null) {
			list.push(thing);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	if(!(yy.commentDepth)) {
		yy.commentDepth = 0;
	}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore comments */
break;
case 1:/* Ignore comments */
break;
case 2:yy.commentDepth++; this.begin("comment");
break;
case 3:yy.commentDepth++;
break;
case 4:yy.commentDepth--; if(yy.commentDepth === 0) {this.popState();}
break;
case 5:return "NEWLINE";
break;
case 6:/* Ignore whitespace */
break;
case 7:this.begin("dstring"); string = "";
break;
case 8:this.popState(); yy_.yytext = string; return "STRING";
break;
case 9:this.begin("esc");
break;
case 10:string += yy_.yytext;
break;
case 11:this.begin("sstring"); string = "";
break;
case 12:this.popState(); yy_.yytext = string; return "STRING";
break;
case 13:this.begin("esc");
break;
case 14:string += yy_.yytext;
break;
case 15:string += "\n"; this.popState();
break;
case 16:string += "\r"; this.popState();
break;
case 17:string += "\t"; this.popState();
break;
case 18:string += "\0"; this.popState();
break;
case 19:string += "\'"; this.popState();
break;
case 20:string += "\""; this.popState();
break;
case 21:return "HEXNUMBER";
break;
case 22:return "OCTALNUMBER";
break;
case 23:return "BINARYNUMBER";
break;
case 24:return "NUMBER";
break;
case 25:return "LEXEC";
break;
case 26:return "REXEC";
break;
case 27:return "RANGE";
break;
case 28:return "PLUSASSIGN";
break;
case 29:return "MINUSASSIGN";
break;
case 30:return "MULTIPLAYASSIGN";
break;
case 31:return "DIVIDEASSIGN";
break;
case 32:return "EQUALS";
break;
case 33:return "NOTEQUALS";
break;
case 34:return "GTE";
break;
case 35:return "LTE";
break;
case 36:return "GT";
break;
case 37:return "LT";
break;
case 38:return "AND";
break;
case 39:return "OR";
break;
case 40:return "NOT";
break;
case 41:return "MULTIPLY";
break;
case 42:return "DIVIDE";
break;
case 43:return "MINUS";
break;
case 44:return "PLUS";
break;
case 45:return "ASSIGN";
break;
case 46:return "BITOR";
break;
case 47:return "BITAND";
break;
case 48:return "LBRACKET";
break;
case 49:return "RBRACKET";
break;
case 50:return "LSQUARE";
break;
case 51:return "RSQUARE";
break;
case 52:return "LPAREN";
break;
case 53:return "RPAREN";
break;
case 54:return "DOT";
break;
case 55:return "COMMA";
break;
case 56:return "COLON";
break;
case 57:return "TERNARY";
break;
case 58:return "TRUE";
break;
case 59:return "FALSE";
break;
case 60:return "NULL";
break;
case 61:return "UNDEFINED";
break;
case 62:return "FUNCTION";
break;
case 63:return "FUNCTION";
break;
case 64:return "FUNCTION";
break;
case 65:return "VARIABLE";
break;
case 66:return "VARIABLE";
break;
case 67:return "IF";
break;
case 68:return "ELSE";
break;
case 69:return "LOOP";
break;
case 70:return "WHILE";
break;
case 71:return "FOR";
break;
case 72:return "IN";
break;
case 73:return "STEP";
break;
case 74:return "STEP";
break;
case 75:return "RETURN";
break;
case 76:return "BREAK";
break;
case 77:return "CONTINUE";
break;
case 78:return "PRINT";
break;
case 79:return "ERROR";
break;
case 80:return "IDENTIFIER";
break;
case 81:return "EOF";
break;
case 82:return "INVALID";
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:\/\*)/,/^(?:.*?(\/\*))/,/^(?:.*?(\*\/))/,/^(?:([\n\r])+)/,/^(?:\s+)/,/^(?:")/,/^(?:")/,/^(?:\\)/,/^(?:[^"\\]*)/,/^(?:')/,/^(?:')/,/^(?:\\)/,/^(?:[^'\\]*)/,/^(?:[n])/,/^(?:[r])/,/^(?:[t])/,/^(?:[0])/,/^(?:['])/,/^(?:["])/,/^(?:0x([0-9a-fA-F]([_]?[0-9a-fA-F])*)\b)/,/^(?:0o([0-7]([_]?[0-7])*)\b)/,/^(?:0b([01]([_]?[01])*)\b)/,/^(?:(([0-9]([_]?[0-9])*)([\.][0-9]+)?|[\.][0-9]+)\b)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\.\.)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:\|)/,/^(?:&)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:func\b)/,/^(?:fun\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:step\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:print\b)/,/^(?:error\b)/,/^(?:([a-zA-Z_$][a-zA-Z0-9_$]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"comment":{"rules":[3,4],"inclusive":false},"esc":{"rules":[15,16,17,18,19,20],"inclusive":false},"sstring":{"rules":[12,13,14],"inclusive":false},"dstring":{"rules":[8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,2,5,6,7,11,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
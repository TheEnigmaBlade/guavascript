/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,142],$V1=[1,5],$V2=[5,35,48],$V3=[2,6],$V4=[1,18],$V5=[1,34],$V6=[1,21],$V7=[1,19],$V8=[1,20],$V9=[1,42],$Va=[1,59],$Vb=[1,51],$Vc=[1,60],$Vd=[1,22],$Ve=[1,58],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,33],$Vj=[1,35],$Vk=[1,28],$Vl=[1,29],$Vm=[1,38],$Vn=[1,32],$Vo=[1,37],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,50],$Vx=[1,52],$Vy=[1,53],$Vz=[1,54],$VA=[1,55],$VB=[1,56],$VC=[1,57],$VD=[2,141],$VE=[1,65],$VF=[5,12,13,15,25,27,28,29,33,35,37,38,40,42,43,47,48,50,54,55,56,57,58,59,60,62,72,73,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118,119],$VG=[5,17,29,35,37,42,48,73,119],$VH=[5,35,48,119],$VI=[1,74],$VJ=[2,122],$VK=[2,78],$VL=[1,80],$VM=[1,81],$VN=[1,82],$VO=[1,87],$VP=[2,109],$VQ=[1,89],$VR=[1,90],$VS=[1,92],$VT=[1,93],$VU=[1,94],$VV=[1,95],$VW=[1,96],$VX=[1,91],$VY=[5,17,29,33,35,37,42,48,53,73,82,83,119],$VZ=[5,17,28,29,33,35,37,40,42,48,53,63,65,68,69,70,71,73,76,77,78,79,80,82,83,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,107,119],$V_=[5,17,29,33,35,37,42,48,53,73,82,83,86,87,88,89,90,91,119],$V$=[1,123],$V01=[1,113],$V11=[1,114],$V21=[1,115],$V31=[1,116],$V41=[1,117],$V51=[1,118],$V61=[1,119],$V71=[1,120],$V81=[1,121],$V91=[1,122],$Va1=[15,25,27,28,33,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Vb1=[5,17,29,33,35,37,42,48,53,63,68,69,70,71,73,82,83,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,119],$Vc1=[15,35,38],$Vd1=[15,25,27,28,33,38,40,42,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Ve1=[12,13,15,25,27,28,33,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Vf1=[15,25,27,28,29,33,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Vg1=[1,141],$Vh1=[15,29],$Vi1=[5,17,35,48,119],$Vj1=[15,28,33,38,40,47,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Vk1=[1,194],$Vl1=[2,45],$Vm1=[5,17,29,33,35,37,42,48,53,63,68,69,70,71,73,82,83,86,87,88,89,90,91,93,94,99,100,101,102,119],$Vn1=[5,17,29,33,35,37,42,48,53,63,68,69,70,71,73,82,83,86,87,88,89,90,91,99,100,101,102,119],$Vo1=[5,17,29,33,35,37,42,48,53,63,68,69,70,71,73,82,83,86,87,88,89,90,91,102,119],$Vp1=[1,211],$Vq1=[1,221],$Vr1=[17,29,119],$Vs1=[2,116],$Vt1=[1,236],$Vu1=[1,237],$Vv1=[1,241],$Vw1=[12,13,15,17,25,27,28,33,37,38,40,43,47,48,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118,119],$Vx1=[12,13,15,25,27,28,33,38,40,43,47,48,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$Vy1=[2,117],$Vz1=[17,35,119];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"w":6,"expression_list":7,"expression":8,"statement":9,"W":10,"var_declaration":11,"THROW":12,"VARIABLE":13,"var_declarators":14,"IDENTIFIER":15,"assignment_operator":16,"COMMA":17,"alias_call_expressions":18,"execution_expression":19,"function_expression":20,"control_expression":21,"loop_expression":22,"assignment_expression":23,"try_catch_expression":24,"PRINT":25,"alias_call":26,"ERROR":27,"LPAREN":28,"RPAREN":29,"call_arguments":30,"anon_expression":31,"object_expression":32,"LBRACKET":33,"object_contents":34,"RBRACKET":35,"object_content_thing":36,"COLON":37,"STRING":38,"array_expression":39,"LSQUARE":40,"array_contents":41,"RSQUARE":42,"FUNCTION":43,"block_expression":44,"function_arguments_opt":45,"function_arguments":46,"LEXEC":47,"REXEC":48,"anon_arguments":49,"ARGMARK":50,"if_control_expression":51,"conditional_expression":52,"TERNARY":53,"BREAK":54,"CONTINUE":55,"RETURN":56,"IF":57,"ELSE":58,"LOOP":59,"WHILE":60,"for_loop_expressions":61,"FOR":62,"IN":63,"post_expression":64,"REVERSE":65,"op_expression":66,"range_operator":67,"STEP":68,"WITH":69,"RANGE":70,"RANGEINC":71,"TRY":72,"CATCH":73,"inc_depth":74,"dec_depth":75,"ASSIGN":76,"PLUSASSIGN":77,"MINUSASSIGN":78,"MULTIPLYASSIGN":79,"DIVIDEASSIGN":80,"compare_expression":81,"OR":82,"AND":83,"NOT":84,"compare_operator":85,"GT":86,"LT":87,"GTE":88,"LTE":89,"EQUALS":90,"NOTEQUALS":91,"unary_expression":92,"PLUS":93,"MINUS":94,"MULTIPLY":95,"DIVIDE":96,"DIVIDEINT":97,"MODULUS":98,"BITAND":99,"BITOR":100,"BITXOR":101,"INSTANCEOF":102,"NEW":103,"TYPEOF":104,"DELETE":105,"primary_expression":106,"DOT":107,"constant":108,"NUMBER":109,"HEXNUMBER":110,"OCTALNUMBER":111,"BINARYNUMBER":112,"THIS":113,"TRUE":114,"FALSE":115,"NULL":116,"UNDEFINED":117,"REGEX":118,"NEWLINE":119,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"THROW",13:"VARIABLE",15:"IDENTIFIER",17:"COMMA",25:"PRINT",27:"ERROR",28:"LPAREN",29:"RPAREN",33:"LBRACKET",35:"RBRACKET",37:"COLON",38:"STRING",40:"LSQUARE",42:"RSQUARE",43:"FUNCTION",47:"LEXEC",48:"REXEC",50:"ARGMARK",53:"TERNARY",54:"BREAK",55:"CONTINUE",56:"RETURN",57:"IF",58:"ELSE",59:"LOOP",60:"WHILE",62:"FOR",63:"IN",65:"REVERSE",68:"STEP",69:"WITH",70:"RANGE",71:"RANGEINC",72:"TRY",73:"CATCH",76:"ASSIGN",77:"PLUSASSIGN",78:"MINUSASSIGN",79:"MULTIPLYASSIGN",80:"DIVIDEASSIGN",82:"OR",83:"AND",84:"NOT",86:"GT",87:"LT",88:"GTE",89:"LTE",90:"EQUALS",91:"NOTEQUALS",93:"PLUS",94:"MINUS",95:"MULTIPLY",96:"DIVIDE",97:"DIVIDEINT",98:"MODULUS",99:"BITAND",100:"BITOR",101:"BITXOR",102:"INSTANCEOF",103:"NEW",104:"TYPEOF",105:"DELETE",107:"DOT",109:"NUMBER",110:"HEXNUMBER",111:"OCTALNUMBER",112:"BINARYNUMBER",113:"THIS",114:"TRUE",115:"FALSE",116:"NULL",117:"UNDEFINED",118:"REGEX",119:"NEWLINE"},
productions_: [0,[3,2],[4,4],[4,3],[4,4],[4,3],[4,1],[7,3],[7,2],[7,3],[7,2],[9,1],[9,2],[11,2],[14,1],[14,3],[14,4],[14,6],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[18,2],[18,2],[26,3],[26,5],[19,2],[32,3],[34,3],[34,4],[34,1],[36,4],[36,4],[39,3],[41,3],[41,4],[41,1],[20,3],[20,4],[20,7],[20,8],[45,2],[45,0],[46,1],[46,4],[31,3],[31,7],[31,6],[49,1],[49,4],[21,1],[21,7],[21,1],[21,1],[21,1],[21,2],[51,4],[51,5],[51,3],[22,3],[22,4],[22,1],[61,6],[61,7],[61,8],[61,10],[61,12],[61,14],[67,1],[67,1],[24,7],[24,6],[44,5],[74,0],[75,0],[23,1],[23,3],[16,1],[16,1],[16,1],[16,1],[16,1],[52,1],[52,3],[52,3],[52,2],[81,1],[81,3],[85,1],[85,1],[85,1],[85,1],[85,1],[85,1],[66,1],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[66,3],[92,1],[92,2],[92,5],[92,7],[92,2],[92,2],[64,1],[64,4],[64,6],[64,4],[64,3],[30,1],[30,4],[106,1],[106,1],[106,5],[106,1],[106,1],[106,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[108,1],[10,2],[10,1],[6,1],[6,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ast.Program($$[$0-1]);
break;
case 2: case 4:
this.$ = $$[$0-2]; noNullPush(this.$, processTopLevelExpression(yy, $$[$0-1]));
break;
case 3: case 5: case 8: case 10:
this.$ = []; noNullPush(this.$, processTopLevelExpression(yy, $$[$0-1]));
break;
case 6: case 27: case 33: case 39: case 45:
this.$ = [];
break;
case 7: case 9:
noNullPush($$[$0-2], processTopLevelExpression(yy, $$[$0-1]));
break;
case 11: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 53: case 78: case 85: case 89: case 97: case 109: case 115: case 123: case 125: case 126: case 127:
this.$ = $$[$0];
break;
case 12:
this.$ = ast.ThrowStatement($$[$0]);
break;
case 13:
this.$ = ast.VarDeclarations($$[$0-1], $$[$0]);
break;
case 14:
this.$ = [ast.VarDeclaration($$[$0])];
break;
case 15:
this.$ = [ast.VarDeclaration($$[$0-2], $$[$0])];
break;
case 16:
$$[$0-3].push(ast.VarDeclaration($$[$0]));
break;
case 17:
$$[$0-5].push(ast.VarDeclaration($$[$0-2], $$[$0]));
break;
case 25:
this.$ = ast.AliasPrint($$[$0]);
break;
case 26:
this.$ = ast.AliasError($$[$0]);
break;
case 28: case 124:
this.$ = $$[$0-2];
break;
case 29:
this.$ = ast.ExecExpression($$[$0-1], $$[$0]);
break;
case 30:
this.$ = ast.ObjectExpression($$[$0-1]);
break;
case 31: case 37:
this.$ = [$$[$0-1]];
break;
case 32: case 38:
this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 34:
this.$ = ast.ObjectThing(ast.Identifier($$[$0-3]), $$[$0]);
break;
case 35:
this.$ = ast.ObjectThing(ast.StringLiteral($$[$0-3]), $$[$0]);
break;
case 36:
this.$ = ast.ArrayExpression($$[$0-1]);
break;
case 40:
this.$ = ast.AnonFuncExpression(null, $$[$0]);
break;
case 41:
this.$ = ast.FuncExpression($$[$0-2], null, $$[$0]);
break;
case 42:
this.$ = ast.AnonFuncExpression($$[$0-3], $$[$0]);
break;
case 43:
this.$ = ast.FuncExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 44:
this.$ = $$[$0-1];
break;
case 46: case 51:
this.$ = [ast.Identifier($$[$0])];
break;
case 47: case 52:
$$[$0-3].push(ast.Identifier($$[$0]));
break;
case 48:
this.$ = ast.AnonFuncExpression(null, ast.BlockExpression($$[$0-1]));
break;
case 49:
this.$ = ast.AnonFuncExpression($$[$0-3], ast.BlockExpression($$[$0-1]));
break;
case 50:
this.$ = ast.AnonFuncExpression($$[$0-2], ast.BlockExpression($$[$0-1]));
break;
case 54:
this.$ = ast.TernaryExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 55:
this.$ = ast.Break();
break;
case 56:
this.$ = ast.Continue();
break;
case 57:
this.$ = ast.Return();
break;
case 58:
this.$ = ast.Return($$[$0]);
break;
case 59:
this.$ = ast.IfExpression($$[$0-2], $$[$0]);
break;
case 60:
this.$ = ast.ElseIfExpression($$[$0-2], $$[$0]);
break;
case 61:
this.$ = ast.ElseExpression($$[$0]);
break;
case 62:
this.$ = ast.LoopExpression($$[$0]);
break;
case 63:
this.$ = ast.WhileLoop($$[$0-2], $$[$0]);
break;
case 65:
this.$ = ast.ForEachLoop($$[$0-2], $$[$0-4], $$[$0]);
break;
case 66:
this.$ = ast.ForEachLoop($$[$0-3], $$[$0-5], $$[$0-1], true);
break;
case 67:
this.$ = ast.ForLoop($$[$0-6], $$[$0-3], $$[$0-4], $$[$0-2], 1, $$[$0]);
break;
case 68:
this.$ = ast.ForLoop($$[$0-8], $$[$0-5], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 69:
this.$ = ast.ForLoop($$[$0-10], $$[$0-5], $$[$0-6], $$[$0-4], 1, $$[$0], $$[$0-8], $$[$0-2]);
break;
case 70:
this.$ = ast.ForLoop($$[$0-12], $$[$0-7], $$[$0-8], $$[$0-6], $$[$0-4], $$[$0], $$[$0-10], $$[$0-2]);
break;
case 71: case 92:
this.$ = "<";
break;
case 72: case 94:
this.$ = "<=";
break;
case 73:

		this.$ = ast.TryExpression(ast.BlockExpression([processTopLevelExpression(yy, $$[$0-5])]),
								ast.CatchClause(ast.Identifier($$[$0-2]), $$[$0]));
	
break;
case 74:

		this.$ = ast.TryExpression(ast.BlockExpression([processTopLevelExpression(yy, $$[$0-4])]),
								ast.CatchClause(ast.Identifier($$[$0-2]), $$[$0]));
	
break;
case 75:
this.$ = ast.BlockExpression($$[$0-2]);
break;
case 76:
incDepth();
break;
case 77:
decDepth();
break;
case 79:
this.$ = ast.AssignExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 80:
this.$ = "=";
break;
case 81:
this.$ = "+=";
break;
case 82:
this.$ = "-=";
break;
case 83:
this.$ = "*=";
break;
case 84:
this.$ = "/=";
break;
case 86:
this.$ = ast.LogicExpression("||", $$[$0-2], $$[$0]);
break;
case 87:
this.$ = ast.LogicExpression("&&", $$[$0-2], $$[$0]);
break;
case 88:
this.$ = ast.UnaryExpression("!", $$[$0]);
break;
case 90:
this.$ = ast.BinaryExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 91:
this.$ = ">";
break;
case 93:
this.$ = ">=";
break;
case 95:
this.$ = "===";
break;
case 96:
this.$ = "!==";
break;
case 98:
this.$ = ast.BinaryExpression("+", $$[$0-2], $$[$0]);
break;
case 99:
this.$ = ast.BinaryExpression("-", $$[$0-2], $$[$0]);
break;
case 100:
this.$ = ast.BinaryExpression("*", $$[$0-2], $$[$0]);
break;
case 101:
this.$ = ast.BinaryExpression("/", $$[$0-2], $$[$0]);
break;
case 102:
this.$ = ast.DivideInt($$[$0-2], $$[$0]);
break;
case 103:
this.$ = ast.BinaryExpression("%", $$[$0-2], $$[$0]);
break;
case 104:
this.$ = ast.BinaryExpression("&", $$[$0-2], $$[$0]);
break;
case 105:
this.$ = ast.BinaryExpression("|", $$[$0-2], $$[$0]);
break;
case 106:
this.$ = ast.BinaryExpression("^", $$[$0-2], $$[$0]);
break;
case 107:
this.$ = ast.BinaryExpression("instanceof", $$[$0-2], $$[$0]);
break;
case 108:
this.$ = ast.BinaryExpression("in", $$[$0-2], $$[$0]);
break;
case 110:
this.$ = ast.UnaryExpression("-", $$[$0]);
break;
case 111:
this.$ = ast.NewExpression($$[$0-3]);
break;
case 112:
this.$ = ast.NewExpression($$[$0-5], $$[$0-2]);
break;
case 113:
this.$ = ast.UnaryExpression("typeof", $$[$0]);
break;
case 114:
this.$ = ast.UnaryExpression("delete", $$[$0]);
break;
case 116:
this.$ = ast.CallExpression($$[$0-3]);
break;
case 117:
this.$ = ast.CallExpression($$[$0-5], $$[$0-2]);
break;
case 118:
this.$ = ast.MemberExpression($$[$0-3], $$[$0-1]);
break;
case 119:
this.$ = ast.PropertyExpression($$[$0-2], ast.Identifier($$[$0]));
break;
case 120:
this.$ = [$$[$0]];
break;
case 121:
$$[$0-3].push($$[$0]);
break;
case 122:
this.$ = ast.Identifier($$[$0]);
break;
case 128: case 129: case 130: case 131:
this.$ = ast.NumericLiteral($$[$0]);
break;
case 132:
this.$ = ast.StringLiteral($$[$0]);
break;
case 133:
this.$ = ast.ThisExpression();
break;
case 134:
this.$ = ast.BooleanLiteral(true);
break;
case 135:
this.$ = ast.BooleanLiteral(false);
break;
case 136:
this.$ = ast.NullLiteral();
break;
case 137:
this.$ = ast.Undefined();
break;
case 138:
this.$ = ast.Regex($$[$0]);
break;
}
},
table: [o([5,12,13,15,25,27,28,33,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$V0,{3:1,4:2,6:3,10:4,119:$V1}),{1:[3]},{5:[1,6]},o($V2,$V3,{7:7,8:8,9:9,18:10,19:11,20:12,21:13,22:14,23:15,24:16,11:17,51:23,52:24,61:30,64:31,81:36,106:39,66:40,108:41,31:43,32:44,39:45,92:46,12:$V4,13:$V5,15:$V6,25:$V7,27:$V8,28:$V9,33:$Va,38:$Vb,40:$Vc,43:$Vd,47:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,62:$Vm,72:$Vn,84:$Vo,94:$Vp,103:$Vq,104:$Vr,105:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),o([5,12,13,15,25,27,28,29,33,35,37,38,40,42,43,47,48,50,54,55,56,57,58,59,60,62,72,73,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$VD,{119:$VE}),o($VF,[2,140]),{1:[2,1]},{8:66,9:67,11:17,12:$V4,13:$V5,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($V2,$V0,{6:68,10:69,119:$V1}),o($V2,$V0,{6:70,10:71,119:$V1}),o($VG,[2,18]),o($VG,[2,19]),o($VG,[2,20]),o($VG,[2,21]),o($VG,[2,22]),o($VG,[2,23]),o($VG,[2,24]),o($VH,[2,11]),{8:72,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{26:73,28:$VI},{26:75,28:$VI},o([5,17,28,29,33,35,37,40,42,48,53,63,73,76,77,78,79,80,82,83,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,107,119],$VJ,{31:76,47:$Ve}),{6:77,10:4,15:[1,78],28:[1,79],33:$V0,119:$V1},o($VG,[2,53]),o($VG,$VK,{53:$VL,82:$VM,83:$VN}),o($VG,[2,55]),o($VG,[2,56]),o($VG,[2,57],{18:10,19:11,20:12,21:13,22:14,23:15,24:16,51:23,52:24,61:30,64:31,81:36,106:39,66:40,108:41,31:43,32:44,39:45,92:46,8:83,15:$V6,25:$V7,27:$V8,28:$V9,33:$Va,38:$Vb,40:$Vc,43:$Vd,47:$Ve,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,62:$Vm,72:$Vn,84:$Vo,94:$Vp,103:$Vq,104:$Vr,105:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC}),{6:84,10:4,33:$V0,119:$V1},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,52:85,64:86,66:40,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,64]),o([5,17,29,33,35,37,42,48,53,63,73,82,83,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,119],$VP,{16:88,28:$VQ,40:$VR,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW,107:$VX}),{8:97,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:98,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:99,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{14:100,15:[1,101]},{6:103,10:4,33:$V0,57:[1,102],119:$V1},o($VY,[2,85],{85:104,86:[1,105],87:[1,106],88:[1,107],89:[1,108],90:[1,109],91:[1,110]}),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,52:111,64:86,66:40,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:[1,112]},o($VZ,[2,115]),o($V_,[2,89],{63:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91}),o($VZ,[2,123]),o($Va1,$V0,{10:4,6:124,119:$V1}),o($VZ,[2,125]),o($VZ,[2,126]),o($VZ,[2,127]),o($Vb1,[2,97]),o($VZ,[2,128]),o($VZ,[2,129]),o($VZ,[2,130]),o($VZ,[2,131]),o($VZ,[2,132]),o($VZ,[2,133]),o($VZ,[2,134]),o($VZ,[2,135]),o($VZ,[2,136]),o($VZ,[2,137]),o($VZ,[2,138]),o([12,13,15,25,27,28,33,37,38,40,43,47,48,50,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$V0,{10:4,4:125,6:126,119:$V1}),o($Vc1,$V0,{10:4,34:127,6:128,119:$V1}),o($Vd1,$V0,{10:4,41:129,6:130,119:$V1}),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,92:131,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:132,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:133,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:134,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VF,[2,139]),o($V2,$V0,{6:135,10:136,119:$V1}),o($V2,$V0,{6:137,10:138,119:$V1}),o($V2,[2,3]),o($Ve1,[2,8],{5:$VD,35:$VD,48:$VD,119:$VE}),o($V2,[2,5]),o($Ve1,[2,10],{5:$VD,35:$VD,48:$VD,119:$VE}),o($VH,[2,12]),o($VG,[2,25]),o($Vf1,$V0,{10:4,6:139,119:$V1}),o($VG,[2,26]),o($VG,[2,29]),{33:$Vg1,44:140},{6:142,10:4,28:[1,143],33:$V0,119:$V1},o($Vh1,$V0,{10:4,6:144,119:$V1}),o($Va1,$V0,{10:4,6:145,119:$V1}),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,52:146,64:86,66:40,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,52:147,64:86,66:40,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,58]),{33:$Vg1,44:148},{6:149,10:4,33:$V0,82:$VM,83:$VN,119:$V1},o($Vb1,$VP,{28:$VQ,40:$VR,107:$VX}),o([5,17,28,29,33,35,37,40,42,48,53,63,65,68,69,70,71,73,82,83,86,87,88,89,90,91,93,94,95,96,97,98,99,100,101,102,107,119],$VJ),{8:150,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vf1,$V0,{10:4,6:151,119:$V1}),{8:152,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:[1,153]},o($Va1,[2,80]),o($Va1,[2,81]),o($Va1,[2,82]),o($Va1,[2,83]),o($Va1,[2,84]),{6:154,10:4,73:$V0,119:$V1},{73:[1,155]},{6:156,10:4,33:$V0,53:$VL,73:$VK,82:$VM,83:$VN,119:$V1},o($VH,[2,13],{17:[1,157]}),o($Vi1,[2,14],{16:158,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,52:159,64:86,66:40,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{33:$Vg1,44:160},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:161,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vj1,[2,91]),o($Vj1,[2,92]),o($Vj1,[2,93]),o($Vj1,[2,94]),o($Vj1,[2,95]),o($Vj1,[2,96]),o($VY,[2,88]),{17:[1,163],63:[1,162]},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:164,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:165,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:166,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:167,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:168,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:169,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:170,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:171,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:172,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:173,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:174,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:175,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{48:[1,176]},{7:7,8:8,9:9,11:17,12:$V4,13:$V5,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,37:[1,177],38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,48:$V3,50:[1,178],51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{35:[1,179]},{15:[1,181],35:[2,33],36:180,38:[1,182]},{42:[1,183]},{8:184,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,42:[2,39],43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vb1,[2,110]),{28:[1,185],40:$VR,107:$VX},o($Vb1,[2,113],{28:$VQ,40:$VR,107:$VX}),o($Vb1,[2,114],{28:$VQ,40:$VR,107:$VX}),o($V2,[2,2]),o($Ve1,[2,7],{5:$VD,35:$VD,48:$VD,119:$VE}),o($V2,[2,4]),o($Ve1,[2,9],{5:$VD,35:$VD,48:$VD,119:$VE}),{8:188,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,29:[1,186],30:187,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,40]),o([12,13,15,25,27,28,33,35,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118,119],[2,76],{74:189}),{33:$Vg1,44:190},o($Vh1,$V0,{10:4,6:191,119:$V1}),{15:$Vk1,29:$Vl1,45:192,46:193},{8:195,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VY,[2,86]),o($VY,[2,87]),o($VG,[2,62]),{33:$Vg1,44:196},o($VG,[2,79]),{8:188,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,29:[1,197],30:198,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{42:[1,199]},o($VZ,[2,119]),{73:[1,200]},{15:[1,201]},{33:$Vg1,44:202},{6:203,10:4,15:$V0,119:$V1},{8:204,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{6:205,10:4,33:$V0,82:$VM,83:$VN,119:$V1},o($VG,[2,61]),o($V_,[2,90],{63:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91}),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:206,66:207,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:[1,208]},o($Vm1,[2,98],{95:$V21,96:$V31,97:$V41,98:$V51}),o($Vm1,[2,99],{95:$V21,96:$V31,97:$V41,98:$V51}),o($Vb1,[2,100]),o($Vb1,[2,101]),o($Vb1,[2,102]),o($Vb1,[2,103]),o($Vn1,[2,104],{93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51}),o($Vn1,[2,105],{93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51}),o($Vn1,[2,106],{93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51}),o($Vo1,[2,107],{93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81}),o($Vo1,[2,108],{93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81}),{6:209,10:4,29:$V0,119:$V1},o($VZ,[2,48]),{15:$Vp1,49:210},{15:$Vp1,49:212},o($VZ,[2,30]),{6:213,10:4,17:[1,214],35:$V0,119:$V1},{37:[1,215]},{37:[1,216]},o($VZ,[2,36]),{6:217,10:4,17:[1,218],42:$V0,119:$V1},o($Vf1,$V0,{10:4,6:219,119:$V1}),o($VG,[2,27]),{6:220,10:4,17:$Vq1,29:$V0,119:$V1},o($Vr1,[2,120]),o([12,13,15,25,27,28,33,35,38,40,43,47,54,55,56,57,58,59,60,62,72,84,94,103,104,105,109,110,111,112,113,114,115,116,117,118],$V0,{6:3,10:4,4:222,119:$V1}),o($VG,[2,41]),{15:$Vk1,29:$Vl1,45:223,46:193},{29:[1,224]},{6:225,10:4,17:[1,226],29:$V0,119:$V1},o($Vr1,[2,46]),{37:[1,227]},o($VG,[2,63]),o($VZ,$Vs1),{6:228,10:4,17:$Vq1,29:$V0,119:$V1},o($VZ,[2,118]),{15:[1,229]},{6:230,10:4,33:$V0,119:$V1},o($VG,[2,59]),{15:[1,231]},o($Vi1,[2,15]),{33:$Vg1,44:232},o([63,70,71,93,94,95,96,97,98,99,100,101,102],$VP,{10:4,6:233,28:$VQ,33:$V0,40:$VR,65:[1,234],107:$VX,119:$V1}),{63:$V$,67:235,70:$Vt1,71:$Vu1,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91},{63:[1,238]},{29:[1,239]},{17:$Vv1,37:[1,240]},o($Vw1,[2,51]),o($Vx1,$V0,{6:3,10:4,4:242,17:$Vv1,119:$V1}),{35:[2,31]},o($Vc1,$V0,{10:4,6:128,34:243,119:$V1}),o($Va1,$V0,{10:4,6:244,119:$V1}),o($Va1,$V0,{10:4,6:245,119:$V1}),{42:[2,37]},o($Vd1,$V0,{10:4,6:130,41:246,119:$V1}),{8:188,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,29:[1,247],30:248,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{29:[1,249]},o($Va1,$V0,{10:4,6:250,119:$V1}),{35:[2,77],75:251},{29:[1,252]},{6:253,10:4,33:$V0,119:$V1},{29:[2,44]},{6:254,10:4,15:$V0,119:$V1},o($Va1,$V0,{10:4,6:255,119:$V1}),{29:[1,256]},{6:257,10:4,33:$V0,119:$V1},{33:$Vg1,44:258},o($Vi1,[2,16],{16:259,76:$VS,77:$VT,78:$VU,79:$VV,80:$VW}),o($VG,[2,60]),{33:$Vg1,44:260},{6:261,10:4,33:$V0,119:$V1},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:262,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($Vj1,[2,71]),o($Vj1,[2,72]),{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:263,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VZ,[2,124]),o($Vx1,$V0,{6:3,10:4,4:264,119:$V1}),{6:265,10:4,15:$V0,119:$V1},{48:[1,266]},{35:[2,32]},{8:267,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{8:268,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{42:[2,38]},o($Vb1,[2,111],{28:$Vs1,40:$Vs1,107:$Vs1}),{6:269,10:4,17:$Vq1,29:$V0,119:$V1},o($VG,[2,28]),{8:270,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{35:[1,271]},{6:272,10:4,33:$V0,119:$V1},{33:$Vg1,44:273},{15:[1,274]},{8:275,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VZ,$Vy1),{33:$Vg1,44:276},o($VG,[2,74]),{8:277,15:$V6,18:10,19:11,20:12,21:13,22:14,23:15,24:16,25:$V7,27:$V8,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,43:$Vd,47:$Ve,51:23,52:24,54:$Vf,55:$Vg,56:$Vh,57:$Vi,58:$Vj,59:$Vk,60:$Vl,61:30,62:$Vm,64:31,66:40,72:$Vn,81:36,84:$Vo,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,65]),{33:$Vg1,44:278},{6:279,10:4,33:$V0,63:$V$,68:[1,280],93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91,119:$V1},{63:$V$,67:281,70:$Vt1,71:$Vu1,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91},{48:[1,282]},{15:[1,283]},o($VZ,[2,50]),o($Vz1,[2,34]),o($Vz1,[2,35]),{29:[1,284]},o($Vr1,[2,121]),o($VG,[2,75]),{33:$Vg1,44:285},o($VG,[2,42]),o($Vr1,[2,47]),o($VG,[2,54]),o($VG,[2,73]),o($Vi1,[2,17]),o($VG,[2,66]),{33:$Vg1,44:286},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:287,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:288,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VZ,[2,49]),o($Vw1,[2,52]),o($Vb1,[2,112],{28:$Vy1,40:$Vy1,107:$Vy1}),o($VG,[2,43]),o($VG,[2,67]),{6:289,10:4,33:$V0,63:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91,119:$V1},{63:$V$,68:[1,291],69:[1,290],93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91},{33:$Vg1,44:292},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:293,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:294,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,68]),{6:295,10:4,33:$V0,63:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91,119:$V1},{63:$V$,69:[1,296],93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91},{33:$Vg1,44:297},{15:$VO,28:$V9,31:43,32:44,33:$Va,38:$Vb,39:45,40:$Vc,47:$Ve,64:86,66:298,92:46,94:$Vp,103:$Vq,104:$Vr,105:$Vs,106:39,108:41,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VG,[2,69]),{6:299,10:4,33:$V0,63:$V$,93:$V01,94:$V11,95:$V21,96:$V31,97:$V41,98:$V51,99:$V61,100:$V71,101:$V81,102:$V91,119:$V1},{33:$Vg1,44:300},o($VG,[2,70])],
defaultActions: {6:[2,1],213:[2,31],217:[2,37],225:[2,44],243:[2,32],246:[2,38]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ast = require("./ast");
	var debug = false;
	
	function print(t) {
		if(debug) {
			console.log(t);
		}
	}
	
	// Depth tracking
	var depth = 0;
	
	function incDepth() {
		depth += 1;
	}
	
	function decDepth() {
		depth -= 1;
	}
	
	// Post-processing
	
	var top_level_if = [];
	
	function pruneTopIfs(currentDepth, same) {
		if(!same) {
			currentDepth++;
		}
		while(top_level_if.length > 0 && top_level_if[top_level_if.length-1]._depth >= currentDepth) {
			var top = top_level_if.pop();
			print("Popped if at "+top._depth);
		}
	}
	
	function processTopLevelExpression(yy, e, nameAnon) {
		// Move if-else/else into alternate slots
		if(e._if) {
			print("!Start if: "+depth);
			e._depth = depth;
			top_level_if.push(e);
			return e;
		}
		if(e._if_else || e._else) {
			print("!Start if-else/else: "+depth);
			pruneTopIfs(depth);
			
			if(top_level_if.length === 0) {
				throw Error("No previous ifs for else")
			}
			
			var top = top_level_if[top_level_if.length-1];
			print("  Top if depth: "+top._depth);
			if(top._depth !== depth) {
				throw Error("else-if/else found before if");
			}
			
			top.alternate = e;
			top_level_if.pop();
			if(e._if_else) {
				e._depth = depth;
				top_level_if.push(e);
			}
			return null;
		}
		
		print("Processing other top-level thing");
		print("  Depth: "+depth);
		print("  Type: "+e.type);
		pruneTopIfs(depth, true);
		
		// Wrap or declarize functions
		if(e._anon) {
			// Wrap non-named anonymous functions
			if(nameAnon) {
				return ast.toFuncDeclaration(e, ast.getUID("anon"));
			}
			else {
				return ast.ExecExpression(null, e);
			}
		}
		if(e._func) {
			// Change named functions to declarations
			return ast.toFuncDeclaration(e);
		}
		// Wrap plain expressions
		if(e._expr) {
			return ast.Expression(e);
		}
		
		return e;
	}
	
	function noNullPush(list, thing) {
		if(thing !== undefined && thing !== null) {
			list.push(thing);
		}
	}
	
	// Exports
	
	if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
		exports.reset = function() {
			depth = 0;
			top_level_if = [];
		};
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	if(!yy._setup) {
		yy._setup = true;
		yy.commentDepth = 0;
		//yy.blockDepth = 0;
	}

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore comments */
break;
case 1:yy.commentDepth++; this.begin("comment");
break;
case 2:yy.commentDepth++;
break;
case 3:yy.commentDepth--; if(yy.commentDepth === 0) {this.popState();}
break;
case 4:/* Ignore comments */
break;
case 5:return "NEWLINE";
break;
case 6:/* Ignore whitespace */
break;
case 7:this.begin("dstring"); string = "";
break;
case 8:this.popState(); yy_.yytext = string; return "STRING";
break;
case 9:this.begin("esc");
break;
case 10:string += yy_.yytext;
break;
case 11:this.begin("sstring"); string = "";
break;
case 12:this.popState(); yy_.yytext = string; return "STRING";
break;
case 13:this.begin("esc");
break;
case 14:string += yy_.yytext;
break;
case 15:string += "\n"; this.popState();
break;
case 16:string += "\r"; this.popState();
break;
case 17:string += "\t"; this.popState();
break;
case 18:string += "\0"; this.popState();
break;
case 19:string += "\'"; this.popState();
break;
case 20:string += "\""; this.popState();
break;
case 21:string += "\\"; this.popState();
break;
case 22:return "HEXNUMBER";
break;
case 23:return "OCTALNUMBER";
break;
case 24:return "BINARYNUMBER";
break;
case 25:return "NUMBER";
break;
case 26:return "REGEX";
break;
case 27:this.begin("anonfunc"); return "LEXEC";
break;
case 28:this.begin("block");	 return "LBRACKET";
break;
case 29:this.popState();		 return "RBRACKET";
break;
case 30:this.popState();		 return "REXEC";
break;
case 31:return "RANGEINC";
break;
case 32:return "RANGE";
break;
case 33:return "PLUSASSIGN";
break;
case 34:return "MINUSASSIGN";
break;
case 35:return "MULTIPLYASSIGN";
break;
case 36:return "DIVIDEASSIGN";
break;
case 37:return "EQUALS";
break;
case 38:return "NOTEQUALS";
break;
case 39:return "GTE";
break;
case 40:return "LTE";
break;
case 41:return "GT";
break;
case 42:return "LT";
break;
case 43:return "AND";
break;
case 44:return "OR";
break;
case 45:return "NOT";
break;
case 46:return "MULTIPLY";
break;
case 47:return "DIVIDEINT";
break;
case 48:return "DIVIDE";
break;
case 49:return "MINUS";
break;
case 50:return "PLUS";
break;
case 51:return "MODULUS";
break;
case 52:return "ASSIGN";
break;
case 53:return "BITOR";
break;
case 54:return "BITAND";
break;
case 55:return "BITXOR";
break;
case 56:return "LSQUARE";
break;
case 57:return "RSQUARE";
break;
case 58:return "LPAREN";
break;
case 59:return "RPAREN";
break;
case 60:return "DOT";
break;
case 61:return "COMMA";
break;
case 62:return "COLON";
break;
case 63:return "TERNARY";
break;
case 64:return "ARGMARK";
break;
case 65:return "TRUE";
break;
case 66:return "FALSE";
break;
case 67:return "NULL";
break;
case 68:return "UNDEFINED";
break;
case 69:return "FUNCTION";
break;
case 70:return "VARIABLE";
break;
case 71:return "VARIABLE";
break;
case 72:return "IF";
break;
case 73:return "ELSE";
break;
case 74:return "LOOP";
break;
case 75:return "WHILE";
break;
case 76:return "FOR";
break;
case 77:return "IN";
break;
case 78:return "STEP";
break;
case 79:return "WITH";
break;
case 80:return "REVERSE";
break;
case 81:return "RETURN";
break;
case 82:return "BREAK";
break;
case 83:return "CONTINUE";
break;
case 84:return "PRINT";
break;
case 85:return "ERROR";
break;
case 86:return "THIS";
break;
case 87:return "NEW";
break;
case 88:return "INSTANCEOF";
break;
case 89:return "TYPEOF";
break;
case 90:return "THROW";
break;
case 91:return "TRY";
break;
case 92:return "CATCH";
break;
case 93:return "FINALLY";
break;
case 94:return "DELETE";
break;
case 95:return "DELETE";
break;
case 96:yy_.yytext = "prototype"; return "IDENTIFIER";
break;
case 97:return "IDENTIFIER";
break;
case 98:return "EOF";
break;
case 99:return "INVALID";
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\/\*)/,/^(?:.*?(\/\*))/,/^(?:.*?(\*\/))/,/^(?:.*?([\n\r]))/,/^(?:([\n\r])+)/,/^(?:([ \t])+)/,/^(?:")/,/^(?:")/,/^(?:\\)/,/^(?:[^"\\]*)/,/^(?:')/,/^(?:')/,/^(?:\\)/,/^(?:[^'\\]*)/,/^(?:[n])/,/^(?:[r])/,/^(?:[t])/,/^(?:[0])/,/^(?:['])/,/^(?:["])/,/^(?:[\\])/,/^(?:0x([0-9a-fA-F]([_]?[0-9a-fA-F])*)\b)/,/^(?:0o([0-7]([_]?[0-7])*)\b)/,/^(?:0b([01]([_]?[01])*)\b)/,/^(?:(([0-9]([_]?[0-9])*)([\.][0-9]+)?|[\.][0-9]+)\b)/,/^(?:\/(\\\/|[^\n\r])+\/[a-z]*)/,/^(?:\{\{)/,/^(?:\{)/,/^(?:\})/,/^(?:\}\})/,/^(?:\.\.\.)/,/^(?:\.\.)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/#)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:%)/,/^(?:=)/,/^(?:\|)/,/^(?:&)/,/^(?:\^)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:@|#)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:(function|func|fun)\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:(step|by)\b)/,/^(?:with\b)/,/^(?:(reverse|rev)\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:print\b)/,/^(?:error\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:instanceof\b)/,/^(?:typeof\b)/,/^(?:throw\b)/,/^(?:(try|protect|guard)\b)/,/^(?:(catch|except)\b)/,/^(?:always\b)/,/^(?:delete\b)/,/^(?:del\b)/,/^(?:proto\b)/,/^(?:([a-zA-Z_$][a-zA-Z0-9_$]*))/,/^(?:$)/,/^(?:.)/],
conditions: {"block":{"rules":[0,1,5,6,7,11,22,23,24,25,26,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true},"anonfunc":{"rules":[0,1,5,6,7,11,22,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true},"comment":{"rules":[2,3,4],"inclusive":false},"esc":{"rules":[15,16,17,18,19,20,21],"inclusive":false},"sstring":{"rules":[12,13,14],"inclusive":false},"dstring":{"rules":[8,9,10],"inclusive":false},"INITIAL":{"rules":[0,1,5,6,7,11,22,23,24,25,26,27,28,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
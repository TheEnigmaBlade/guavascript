/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,106],$V1=[1,5],$V2=[5,24,39],$V3=[1,18],$V4=[1,19],$V5=[1,21],$V6=[1,43],$V7=[1,22],$V8=[1,23],$V9=[1,40],$Va=[1,20],$Vb=[1,26],$Vc=[1,27],$Vd=[1,28],$Ve=[1,33],$Vf=[1,34],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,36],$Vk=[1,48],$Vl=[1,42],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[2,105],$Vr=[1,49],$Vs=[5,19,20,22,24,28,29,31,32,34,36,38,39,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91,92],$Vt=[5,24,26,27,31,36,39,92],$Vu=[2,94],$Vv=[19,20,22,28,29,32,34,38,39,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$Vw=[20,24,28],$Vx=[19,20,22,28,29,31,32,34,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$Vy=[1,65],$Vz=[1,66],$VA=[1,69],$VB=[1,72],$VC=[2,85],$VD=[1,76],$VE=[1,75],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,77],$VL=[5,22,24,26,27,31,36,39,44,67,68,92],$VM=[5,22,24,26,27,29,31,34,36,39,44,56,57,61,62,63,64,65,67,68,71,72,73,74,75,76,79,80,81,82,85,92],$VN=[5,22,24,26,27,31,36,39,44,67,68,71,72,73,74,75,76,92],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[5,22,24,26,27,31,36,39,44,56,57,67,68,71,72,73,74,75,76,79,80,81,82,92],$VT=[19,20,22,28,29,32,34,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$VU=[20,36],$VV=[20,28,34,80,87,88,89,90,91],$VW=[26,40],$VX=[1,146],$VY=[2,34],$VZ=[26,36,92],$V_=[22,92],$V$=[24,26,92];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"expressions":4,"EOF":5,"w":6,"expression_list":7,"expression":8,"W":9,"declaration":10,"execution_expression":11,"anon_expression":12,"object_expression":13,"array_expression":14,"function_expression":15,"control_expression":16,"loop_expression":17,"assignment_expression":18,"VARIABLE":19,"IDENTIFIER":20,"assignment_operator":21,"LBRACKET":22,"object_contents":23,"RBRACKET":24,"object_content_thing":25,"COMMA":26,"COLON":27,"STRING":28,"LSQUARE":29,"array_contents":30,"RSQUARE":31,"FUNCTION":32,"block_expression":33,"LPAREN":34,"function_arguments_opt":35,"RPAREN":36,"function_arguments":37,"LEXEC":38,"REXEC":39,"BITOR":40,"anon_arguments":41,"if_control_expression":42,"conditional_expression":43,"TERNARY":44,"BREAK":45,"CONTINUE":46,"RETURN":47,"IF":48,"ELSE":49,"LOOP":50,"WHILE":51,"FOR":52,"IN":53,"iterable":54,"op_expression":55,"RANGE":56,"STEP":57,"inc_depth":58,"dec_depth":59,"post_expression":60,"ASSIGN":61,"PLUSASSIGN":62,"MINUSASSIGN":63,"MULTIPLYASSIGN":64,"DIVIDEASSIGN":65,"compare_expression":66,"OR":67,"AND":68,"NOT":69,"compare_operator":70,"GT":71,"LT":72,"GTE":73,"LTE":74,"EQUALS":75,"NOTEQUALS":76,"unary_expression":77,"op_operator":78,"PLUS":79,"MINUS":80,"MULTIPLY":81,"DIVIDE":82,"primary_expression":83,"call_arguments":84,"DOT":85,"constant":86,"NUMBER":87,"TRUE":88,"FALSE":89,"NULL":90,"UNDEFINED":91,"NEWLINE":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"VARIABLE",20:"IDENTIFIER",22:"LBRACKET",24:"RBRACKET",26:"COMMA",27:"COLON",28:"STRING",29:"LSQUARE",31:"RSQUARE",32:"FUNCTION",34:"LPAREN",36:"RPAREN",38:"LEXEC",39:"REXEC",40:"BITOR",44:"TERNARY",45:"BREAK",46:"CONTINUE",47:"RETURN",48:"IF",49:"ELSE",50:"LOOP",51:"WHILE",52:"FOR",53:"IN",56:"RANGE",57:"STEP",61:"ASSIGN",62:"PLUSASSIGN",63:"MINUSASSIGN",64:"MULTIPLYASSIGN",65:"DIVIDEASSIGN",67:"OR",68:"AND",69:"NOT",71:"GT",72:"LT",73:"GTE",74:"LTE",75:"EQUALS",76:"NOTEQUALS",79:"PLUS",80:"MINUS",81:"MULTIPLY",82:"DIVIDE",85:"DOT",87:"NUMBER",88:"TRUE",89:"FALSE",90:"NULL",91:"UNDEFINED",92:"NEWLINE"},
productions_: [0,[3,2],[4,4],[4,3],[4,1],[7,3],[7,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[10,2],[10,4],[11,2],[13,3],[23,3],[23,4],[23,1],[25,4],[25,4],[14,3],[30,3],[30,4],[30,1],[15,3],[15,4],[15,7],[15,8],[35,2],[35,0],[37,1],[37,4],[12,3],[12,6],[41,1],[41,3],[16,1],[16,7],[16,1],[16,1],[16,1],[16,2],[42,4],[42,5],[42,3],[17,2],[17,4],[17,6],[17,8],[17,10],[54,1],[54,1],[33,5],[58,0],[59,0],[18,1],[18,3],[21,1],[21,1],[21,1],[21,1],[21,1],[43,1],[43,3],[43,3],[43,2],[66,1],[66,3],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[55,1],[55,3],[78,1],[78,1],[78,1],[78,1],[77,1],[77,2],[60,1],[60,4],[60,6],[60,4],[60,3],[84,1],[84,4],[83,1],[83,1],[83,5],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[9,2],[9,1],[6,1],[6,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return ast.Program($$[$0-1]);
break;
case 2:
this.$ = $$[$0-2]; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 3: case 6:
this.$ = []; noNullPush(this.$, processTopLevelExpression($$[$0-1]));
break;
case 4: case 22: case 28: case 34:
this.$ = [];
break;
case 5:
noNullPush($$[$0-2], processTopLevelExpression($$[$0-1]));
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 41: case 60: case 67: case 71: case 79: case 85: case 87: case 95:
this.$ = $$[$0];
break;
case 16:
this.$ = ast.VarDeclaration($$[$0-1], $$[$0]);
break;
case 17:
this.$ = ast.VarDeclaration($$[$0-3], $$[$0-2], $$[$0]);
break;
case 18:
this.$ = ast.ExecExpression($$[$0-1], $$[$0]);
break;
case 19:
this.$ = ast.ObjectExpression($$[$0-1]);
break;
case 20: case 26:
this.$ = [$$[$0-1]];
break;
case 21: case 27:
this.$ = $$[$0]; this.$.unshift($$[$0-2]);
break;
case 23:
this.$ = ast.ObjectThing(ast.Identifier($$[$0-3]), $$[$0]);
break;
case 24:
this.$ = ast.ObjectThing(ast.StringLiteral($$[$0-3]), $$[$0]);
break;
case 25:
this.$ = ast.ArrayExpression($$[$0-1]);
break;
case 29:
this.$ = ast.AnonFuncExpression(null, $$[$0]);
break;
case 30:
this.$ = ast.FuncExpression($$[$0-2], null, $$[$0]);
break;
case 31:
this.$ = ast.AnonFuncExpression($$[$0-3], $$[$0]);
break;
case 32:
this.$ = ast.FuncExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 33:
this.$ = $$[$0-1];
break;
case 35: case 39:
this.$ = [ast.Identifier($$[$0])];
break;
case 36:
$$[$0-3].push(ast.Identifier($$[$0]));
break;
case 37:
this.$ = ast.AnonFuncExpression(null, $$[$0-1]);
break;
case 38:
this.$ = ast.AnonFuncExpression($$[$0-4], $$[$0-2]);
break;
case 40:
$$[$0-2].push(ast.Identifier($$[$0]));
break;
case 42:
this.$ = ast.TernaryExpression($$[$0-6], $$[$0-3], $$[$0]);
break;
case 43:
this.$ = ast.Break();
break;
case 44:
this.$ = ast.Continue();
break;
case 45:
this.$ = ast.Return();
break;
case 46:
this.$ = ast.Return($$[$0]);
break;
case 47:
this.$ = ast.IfExpression($$[$0-2], $$[$0]);
break;
case 48:
this.$ = ast.ElseIfExpression($$[$0-2], $$[$0]);
break;
case 49:
this.$ = ast.ElseExpression($$[$0]);
break;
case 50:
this.$ = ast.LoopExpression($$[$0]);
break;
case 51:
this.$ = ast.WhileLoop($$[$0-2], $$[$0]);
break;
case 52:
this.$ = ast.ForEachLoop($$[$0-2], $$[$0-4], $$[$0]);
break;
case 53:
this.$ = ast.ForLoop($$[$0-6], $$[$0-4], $$[$0-2], 1, $$[$0]);
break;
case 54:
this.$ = ast.ForLoop($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
break;
case 57:
this.$ = ast.BlockExpression($$[$0-2]);
break;
case 58:
incDepth();
break;
case 59:
decDepth();
break;
case 61:
this.$ = ast.AssignExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 62:
this.$ = "=";
break;
case 63:
this.$ = "+=";
break;
case 64:
this.$ = "-=";
break;
case 65:
this.$ = "*=";
break;
case 66:
this.$ = "/=";
break;
case 68:
this.$ = ast.LogicExpression("||", $$[$0-2], $$[$0]);
break;
case 69:
this.$ = ast.LogicExpression("&&", $$[$0-2], $$[$0]);
break;
case 70:
this.$ = ast.UnaryExpression("!", $$[$0]);
break;
case 72: case 80:
this.$ = ast.BinaryExpression($$[$0-1], $$[$0-2], $$[$0]);
break;
case 73:
this.$ = ">";
break;
case 74:
this.$ = "<";
break;
case 75:
this.$ = ">=";
break;
case 76:
this.$ = "<=";
break;
case 77:
this.$ = "===";
break;
case 78:
this.$ = "!==";
break;
case 81:
this.$ = "+";
break;
case 82:
this.$ = "-";
break;
case 83:
this.$ = "*";
break;
case 84:
this.$ = "/";
break;
case 86:
this.$ = ast.UnaryExpression("-", $$[$0]);
break;
case 88:
this.$ = ast.CallExpression($$[$0-3]);
break;
case 89:
this.$ = ast.CallExpression($$[$0-5], $$[$0-2]);
break;
case 90:
this.$ = ast.MemberExpression($$[$0-3], $$[$0-1]);
break;
case 91:
this.$ = ast.PropertyExpression($$[$0-2], ast.Identifier($$[$0]));
break;
case 92:
this.$ = [$$[$0]];
break;
case 93:
$$[$0-3].push($$[$0]);
break;
case 94:
this.$ = ast.Identifier($$[$0]);
break;
case 96:
this.$ = $$[$0-3];
break;
case 97:
this.$ = ast.NumericLiteral($$[$0]);
break;
case 98:
this.$ = ast.StringLiteral($$[$0]);
break;
case 99:
this.$ = ast.BooleanLiteral(true);
break;
case 100:
this.$ = ast.BooleanLiteral(false);
break;
case 101:
this.$ = ast.NullLiteral();
break;
case 102:
this.$ = ast.Undefined();
break;
}
},
table: [o([5,19,20,22,28,29,32,34,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$V0,{3:1,4:2,6:3,9:4,92:$V1}),{1:[3]},{5:[1,6]},o($V2,[2,4],{7:7,8:8,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,42:24,43:25,60:32,66:35,83:37,55:38,86:39,77:41,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,69:$Vj,80:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp}),o([5,19,20,22,24,28,29,31,32,34,36,38,39,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$Vq,{92:$Vr}),o($Vs,[2,104]),{1:[2,1]},{8:50,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($V2,$V0,{6:51,9:52,92:$V1}),o($Vt,[2,7]),o($Vt,[2,8]),o($Vt,[2,9]),o($Vt,[2,10]),o($Vt,[2,11]),o($Vt,[2,12]),o($Vt,[2,13]),o($Vt,[2,14]),o($Vt,[2,15]),{20:[1,53]},o([5,24,26,27,29,31,34,36,39,44,61,62,63,64,65,67,68,71,72,73,74,75,76,79,80,81,82,85,92],$Vu,{12:54,38:$Va}),o($Vv,$V0,{6:3,9:4,4:55,40:[1,56],92:$V1}),o($Vw,$V0,{9:4,23:57,6:58,92:$V1}),o($Vx,$V0,{9:4,30:59,6:60,92:$V1}),{6:61,9:4,20:[1,62],22:$V0,34:[1,63],92:$V1},o($Vt,[2,41]),o($Vt,[2,60],{44:[1,64],67:$Vy,68:$Vz}),o($Vt,[2,43]),o($Vt,[2,44]),o($Vt,[2,45],{10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,42:24,43:25,60:32,66:35,83:37,55:38,86:39,77:41,8:67,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,69:$Vj,80:$Vk,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp}),{22:$VA,33:68},{20:$VB,28:$V6,34:$V9,43:70,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{20:[1,73]},o([5,24,26,27,31,36,39,44,67,68,71,72,73,74,75,76,79,80,81,82,92],$VC,{21:74,29:$VD,34:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,85:$VK}),{20:$VB,28:$V6,34:$V9,43:83,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{6:85,9:4,22:$V0,48:[1,84],92:$V1},o($VL,[2,67],{70:86,71:[1,87],72:[1,88],73:[1,89],74:[1,90],75:[1,91],76:[1,92]}),{20:$VB,28:$V6,34:$V9,43:93,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VM,[2,87]),o($VN,[2,71],{78:94,79:$VO,80:$VP,81:$VQ,82:$VR}),o($VM,[2,95]),o([20,28,34,69,80,87,88,89,90,91],$V0,{9:4,6:99,92:$V1}),o($VS,[2,79]),o($VM,[2,97]),o($VM,[2,98]),o($VM,[2,99]),o($VM,[2,100]),o($VM,[2,101]),o($VM,[2,102]),{20:$VB,28:$V6,34:$V9,60:71,77:100,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vs,[2,103]),o($V2,$V0,{6:101,9:102,92:$V1}),o($V2,[2,3]),o($VT,[2,6],{5:$Vq,24:$Vq,39:$Vq,92:$Vr}),o($Vt,[2,16],{21:103,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ}),o($Vt,[2,18]),{39:[1,104]},{20:[1,106],41:105},{24:[1,107]},{20:[1,109],24:[2,22],25:108,28:[1,110]},{31:[1,111]},{8:112,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,31:[2,28],32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{22:$VA,33:113},{6:114,9:4,22:$V0,34:[1,115],92:$V1},o($VU,$V0,{9:4,6:116,92:$V1}),o($VT,$V0,{9:4,6:117,92:$V1}),{20:$VB,28:$V6,34:$V9,43:118,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{20:$VB,28:$V6,34:$V9,43:119,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vt,[2,46]),o($Vt,[2,50]),o([19,20,22,24,28,29,32,34,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91,92],[2,58],{58:120}),{6:121,9:4,22:$V0,67:$Vy,68:$Vz,92:$V1},o($VS,$VC,{29:$VD,34:$VE,85:$VK}),o([5,22,24,26,27,29,31,34,36,39,44,56,57,67,68,71,72,73,74,75,76,79,80,81,82,85,92],$Vu),{53:[1,122]},{8:123,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o([19,20,22,28,29,32,34,36,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$V0,{9:4,6:124,92:$V1}),{8:125,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{20:[1,126]},o($VT,[2,62]),o($VT,[2,63]),o($VT,[2,64]),o($VT,[2,65]),o($VT,[2,66]),{6:127,9:4,22:$V0,67:$Vy,68:$Vz,92:$V1},{20:$VB,28:$V6,34:$V9,43:128,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{22:$VA,33:129},{20:$VB,28:$V6,34:$V9,55:130,60:71,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VV,[2,73]),o($VV,[2,74]),o($VV,[2,75]),o($VV,[2,76]),o($VV,[2,77]),o($VV,[2,78]),o($VL,[2,70]),{20:$VB,28:$V6,34:$V9,60:71,77:131,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VV,[2,81]),o($VV,[2,82]),o($VV,[2,83]),o($VV,[2,84]),{20:$VB,28:$V6,34:$V9,43:132,55:38,60:71,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VS,[2,86]),o($V2,[2,2]),o($VT,[2,5],{5:$Vq,24:$Vq,39:$Vq,92:$Vr}),{8:133,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vt,[2,37]),{26:[1,135],40:[1,134]},o($VW,[2,39]),o($Vt,[2,19]),{6:136,9:4,24:$V0,26:[1,137],92:$V1},{27:[1,138]},{27:[1,139]},o([5,22,24,26,27,31,36,39,92],[2,25]),{6:140,9:4,26:[1,141],31:$V0,92:$V1},o($Vt,[2,29]),{22:$VA,33:142},o($VU,$V0,{9:4,6:143,92:$V1}),{20:$VX,35:144,36:$VY,37:145},{8:147,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VL,[2,68]),o($VL,[2,69]),o([19,20,22,24,28,29,32,34,38,45,46,47,48,49,50,51,52,69,80,87,88,89,90,91],$V0,{6:3,9:4,4:148,92:$V1}),{22:$VA,33:149},{14:152,20:$VB,28:$V6,29:$V7,34:$V9,54:150,55:151,60:71,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vt,[2,61]),{8:155,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,36:[1,153],38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,84:154,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{31:[1,156]},o($VM,[2,91]),{22:$VA,33:157},{6:158,9:4,22:$V0,67:$Vy,68:$Vz,92:$V1},o($Vt,[2,49]),o($VN,[2,72],{78:94,79:$VO,80:$VP,81:$VQ,82:$VR}),o($VS,[2,80]),{6:159,9:4,36:$V0,67:$Vy,68:$Vz,92:$V1},o($Vt,[2,17]),o($Vv,$V0,{6:3,9:4,4:160,92:$V1}),{20:[1,161]},{24:[2,20]},o($Vw,$V0,{9:4,6:58,23:162,92:$V1}),o($VT,$V0,{9:4,6:163,92:$V1}),o($VT,$V0,{9:4,6:164,92:$V1}),{31:[2,26]},o($Vx,$V0,{9:4,6:60,30:165,92:$V1}),o($Vt,[2,30]),{20:$VX,35:166,36:$VY,37:145},{36:[1,167]},{6:168,9:4,26:[1,169],36:$V0,92:$V1},o($VZ,[2,35]),{27:[1,170]},{24:[2,59],59:171},o($Vt,[2,51]),{6:172,9:4,22:$V0,92:$V1},o($V_,[2,55],{78:94,56:[1,173],79:$VO,80:$VP,81:$VQ,82:$VR}),o($V_,[2,56]),o($VM,[2,88]),{6:174,9:4,26:[1,175],36:$V0,92:$V1},o($VZ,[2,92]),o($VM,[2,90]),o($Vt,[2,47]),{22:$VA,33:176},{36:[1,177]},{39:[1,178]},o($VW,[2,40]),{24:[2,21]},{8:179,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{8:180,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{31:[2,27]},{36:[1,181]},{6:182,9:4,22:$V0,92:$V1},{36:[2,33]},{6:183,9:4,20:$V0,92:$V1},o($VT,$V0,{9:4,6:184,92:$V1}),{24:[1,185]},{22:$VA,33:186},{20:$VB,28:$V6,34:$V9,55:187,60:71,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{36:[1,188]},o($VT,$V0,{9:4,6:189,92:$V1}),o($Vt,[2,48]),o($VM,[2,96]),o($Vt,[2,38]),o($V$,[2,23]),o($V$,[2,24]),{6:190,9:4,22:$V0,92:$V1},{22:$VA,33:191},{20:[1,192]},{8:193,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($Vt,[2,57]),o($Vt,[2,52]),{6:194,9:4,22:$V0,57:[1,195],78:94,79:$VO,80:$VP,81:$VQ,82:$VR,92:$V1},o($VM,[2,89]),{8:196,10:9,11:10,12:11,13:12,14:13,15:14,16:15,17:16,18:17,19:$V3,20:$V4,22:$V5,28:$V6,29:$V7,32:$V8,34:$V9,38:$Va,42:24,43:25,45:$Vb,46:$Vc,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,55:38,60:32,66:35,69:$Vj,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},{22:$VA,33:197},o($Vt,[2,31]),o($VZ,[2,36]),o($Vt,[2,42]),{22:$VA,33:198},{20:$VB,28:$V6,34:$V9,55:199,60:71,77:41,80:$Vk,83:37,86:39,87:$Vl,88:$Vm,89:$Vn,90:$Vo,91:$Vp},o($VZ,[2,93]),o($Vt,[2,32]),o($Vt,[2,53]),{6:200,9:4,22:$V0,78:94,79:$VO,80:$VP,81:$VQ,82:$VR,92:$V1},{22:$VA,33:201},o($Vt,[2,54])],
defaultActions: {6:[2,1],136:[2,20],140:[2,26],162:[2,21],165:[2,27],168:[2,33]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ast = require("./ast");
	
	// Depth tracking
	var depth = 0;
	
	function incDepth() {
		depth += 1;
	}
	
	function decDepth() {
		depth -= 1;
	}
	
	var top_level_if = [];
	
	function processTopLevelExpression(e, nameAnon) {
		// Move if-else/else into alternate slots
		if(e._if) {
			e._depth = depth;
			top_level_if.push(e);
			return e;
		}
		if(e._if_else || e._else) {
			var top;
			if(top_level_if.length === 0 || (top = top_level_if[top_level_if.length-1])._depth !== depth) {
				throw "else-if/else found before if";
			}
			
			top.alternate = e;
			if(e._else) {
				top_level_if.pop();
			}
			return null;
		}
		
		//console.log("Processing top level thing");
		while(top_level_if.length > 0 && top_level_if[top_level_if.length-1]._depth >= depth) {
			top_level_if.pop();
		}
		
		// Wrap or declarize functions
		if(e._anon) {
			// Wrap non-named anonymous functions
			if(nameAnon) {
				return ast.toFuncDeclaration(e, ast.getUID("anon"));
			}
			else {
				return ast.ExecExpression(null, e);
			}
		}
		if(e._func) {
			// Change named functions to declarations
			return ast.toFuncDeclaration(e);
		}
		// Wrap plain expressions
		if(e._expr) {
			return ast.Expression(e);
		}
		
		return e;
	}
	
	function noNullPush(list, thing) {
		if(thing !== undefined && thing !== null) {
			list.push(thing);
		}
	}
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignore comments */
break;
case 1:/* Ignore comments */
break;
case 2:/* Ignore multiline comment */
break;
case 3:return "NEWLINE"
break;
case 4:/* Ignore whitespace */
break;
case 5:return "LEXEC"
break;
case 6:return "REXEC"
break;
case 7:return "RANGE"
break;
case 8:return "PLUSASSIGN"
break;
case 9:return "MINUSASSIGN"
break;
case 10:return "MULTIPLAYASSIGN"
break;
case 11:return "DIVIDEASSIGN"
break;
case 12:return "EQUALS"
break;
case 13:return "NOTEQUALS"
break;
case 14:return "GTE"
break;
case 15:return "LTE"
break;
case 16:return "GT"
break;
case 17:return "LT"
break;
case 18:return "AND"
break;
case 19:return "OR"
break;
case 20:return "NOT"
break;
case 21:return "MULTIPLY"
break;
case 22:return "DIVIDE"
break;
case 23:return "MINUS"
break;
case 24:return "PLUS"
break;
case 25:return "ASSIGN"
break;
case 26:return "BITOR"
break;
case 27:return "BITAND"
break;
case 28:return "LBRACKET"
break;
case 29:return "RBRACKET"
break;
case 30:return "LSQUARE"
break;
case 31:return "RSQUARE"
break;
case 32:return "LPAREN"
break;
case 33:return "RPAREN"
break;
case 34:return "DOT"
break;
case 35:return "COMMA"
break;
case 36:return "COLON"
break;
case 37:return "TERNARY"
break;
case 38:return "TRUE"
break;
case 39:return "FALSE"
break;
case 40:return "NULL"
break;
case 41:return "UNDEFINED"
break;
case 42:return "FUNCTION"
break;
case 43:return "FUNCTION"
break;
case 44:return "FUNCTION"
break;
case 45:return "VARIABLE"
break;
case 46:return "VARIABLE"
break;
case 47:return "IF"
break;
case 48:return "ELSE"
break;
case 49:return "LOOP"
break;
case 50:return "WHILE"
break;
case 51:return "FOR"
break;
case 52:return "IN"
break;
case 53:return "STEP"
break;
case 54:return "STEP"
break;
case 55:return "RETURN"
break;
case 56:return "BREAK"
break;
case 57:return "CONTINUE"
break;
case 58:return "IDENTIFIER"
break;
case 59:return "NUMBER"
break;
case 60:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 28;
break;
case 61:return "EOF"
break;
case 62:return "INVALID"
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:#.*)/,/^(?:\/\*(.|([\n\r]))*?\*\/)/,/^(?:([\n\r])+)/,/^(?:\s+)/,/^(?:\{\{)/,/^(?:\}\})/,/^(?:\.\.)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:\|)/,/^(?:&)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:\?)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:function\b)/,/^(?:func\b)/,/^(?:fun\b)/,/^(?:var\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:loop\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:step\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-Z_$][a-zA-Z0-9_$]*))/,/^(?:(([0-9]+(\.[0-9]+)?)|(\.[0-9]+))\b)/,/^(?:"[^\"]*"|'[^\']*')/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
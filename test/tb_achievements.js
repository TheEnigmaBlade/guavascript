//   ,:.
//  (:::) Script
//   `-'
// Generated by GuavaScript (guavac) v0.1
// Last modified: 4/30/2016, 1:05:32 AM
function achievements() {
	var self = new TB.Module("Achievements");
	self.shortname = "Achievements";
	self.settings["enabled"]["default"] = true;
	self.register_setting("save", {
		"type": "achievement_save",
		"default": ""
	});
	self.register_setting("lastSeen", {
		"type": "number",
		"default": TBUtils.getTime(),
		"hidden": true
	});
	function Manager() {
		var saves = [], saveIndex = 0, achievements = [];
		this.init = function () {
			var save = self.setting("save");
			if (save.length > 0) {
				saves = this.decodeSave(save);
			}
		};
		this.register = function (title, description, achievement) {
			this.registerTarget(title, description, 1, achievement);
		};
		this.registerTarget = function (title, description, target, achievement) {
			this.registerSeries([title], description, [target], achievement);
		};
		this.registerSeries = function (titles, description, maxValues, achievement) {
			if (saveIndex >= saves.length) {
				saves.push(0);
			}
			var achievementsBlock = [];
			for (var i = 0; i < maxValues.length; i++) {
				var title = titles[i], maxValue = maxValues[i];
				self.log("Registering Achievement");
				if (TB.utils.devMode) {
					self.log("  name=" + title);
				}
				self.log("  maxValue=" + maxValue);
				self.log("  saveIndex=" + saveIndex);
				achievementsBlock.push({
					title: title,
					descr: description.format(maxValue),
					maxValue: maxValue,
					saveIndex: saveIndex
				});
			}
			achievements.push(achievementsBlock);
			achievement(saveIndex);
			saveIndex += 1;
		};
		this.unlock = function (saveIndex, value) {
			if (value === undefined) {
				value = 1;
			}
			self.log("Unlocking achievement block: index=" + saveIndex + ", value=" + value);
			var old = saves[saveIndex];
			self.log("  Old value: " + saves[saveIndex]);
			saves[saveIndex] += value;
			self.log("  New value: " + saves[saveIndex]);
			var achievementsBlock = achievements[saveIndex];
			for (var index = 0; index < achievementsBlock.length; index++) {
				self.log("  Checking achievement " + index);
				var achievement = achievementsBlock[index];
				self.log("    Comparing to max value: " + achievement.maxValue);
				if (saves[saveIndex] >= achievement.maxValue && old < achievement.maxValue) {
					var title = achievement.title;
					title = $(achievement.title).text() ? $(achievement.title).text() : achievement.title;
					self.log("    " + title + " Unlocked!");
					TBUtils.notification("Mod achievement unlocked!", title, window.location + "#?tbsettings=" + self.shortname);
				}
			}
			if (saves[saveIndex] > achievement.maxValue) {
				saves[saveIndex] = achievement.maxValue;
			}
			this.save();
		};
		this.save = function () {
			var save = "";
			saves.forEach(function (saveValue, saveIndex) {
				save += saveValue;
				if (saveIndex < saves.length - 1) {
					save += ";";
				}
			});
			save = btoa(save);
			self.setting("save", save);
		};
		this.decodeSave = function (save) {
			var vals = atob(self.setting("save")).split(";");
			if (vals && vals.length > 0) {
				for (var i = 0; i < vals.length; i++) {
					vals[i] = parseInt(vals[i]);
				}
			}
			return vals;
		};
		this.getAchievementBlockCount = function () {
			return achievements.length;
		};
		this.getAchievementCount = function (saveIndex) {
			return achievements[saveIndex].length;
		};
		this.getAchievementTotal = function () {
			var total = 0;
			for (var saveIndex = 0; saveIndex < achievements.length; saveIndex++) {
				total += this.getAchievementCount(saveIndex);
			}
			return total;
		};
		this.getUnlockedCount = function () {
			var count = 0;
			for (var saveIndex = 0; saveIndex < achievements.length; saveIndex++) {
				var achievementsBlock = achievements[saveIndex];
				for (var index = 0; index < achievementsBlock.length; index++) {
					if (this.isUnlocked(saveIndex, index, saves)) {
						count += 1;
					}
				}
			}
			return count;
		};
		this.getAchievement = function (saveIndex, index) {
			return achievements[saveIndex][index];
		};
		this.isUnlocked = function (saveIndex, index, saves) {
			var a = this.getAchievement(saveIndex, index);
			if (!(saves instanceof Array) || a.saveIndex >= saves.length) {
				return false;
			}
			return saves[a.saveIndex] >= a.maxValue;
		};
	}
	self.manager = new Manager();
	self.manager.init();
	self.init = function () {
		var $body = $("body");
		var lastSeen = self.setting("lastSeen");
		self.log("Registering achievements");
		self.manager.register("<a href=\"https://www.youtube.com/watch?v=StTqXEQ2l-Y\" target=\"_blank\">being awesome</a>", "toolbox just feels like you're awesome today", function (saveIndex) {
			var awesome = 7, chanceOfBeingAwesome = TB.utils.getRandomNumber(10000);
			self.log("You rolled a: " + chanceOfBeingAwesome);
			if (awesome === chanceOfBeingAwesome) {
				self.manager.unlock(saveIndex);
			}
		});
		self.manager.register("<a href=\"https://www.youtube.com/watch?v=Y6ljFaKRTrI\" target=\"_blank\">not dead yet</a>", "Spent a week away from reddit", function (saveIndex) {
			var now = TBUtils.getTime(), timeSince = now - lastSeen, daysSince = TBUtils.millisecondsToDays(timeSince);
			self.log("daysSince: " + daysSince);
			if (daysSince >= 7) {
				self.manager.unlock(saveIndex);
			}
			self.setting("lastSeen", now);
		});
		self.manager.register("<a href=\"/message/compose?to=%2Fr%2Ftoolbox&subject=toolbox%20loves%20me!&message=i%20can%20haz%20flair%3F\" target=\"_blank\">toolbox loves you</a>", "Looked at the about page. <3", function (saveIndex) {
			TB.utils.catchEvent(TB.utils.events.TB_ABOUT_PAGE, function () {
				self.manager.unlock(saveIndex);
			});
		});
		self.manager.register("bug hunter", "Beta testing toolbox", function (saveIndex) {
			if (TB.utils.betaRelease) {
				self.manager.unlock(saveIndex, 1);
			}
		});
		self.manager.register("Judas", "Why do you hate toolbox devs? :'( ", function (saveIndex) {
			$body.on("click", "a:contains(\"remove\")", function () {
				var $this = $(this), auth = TB.utils.getThingInfo($this).author;
				if (TB.utils.tbDevs.indexOf(auth) !== -1) {
					self.manager.unlock(saveIndex, 1);
				}
			});
		});
		self.manager.registerSeries([
			"too nice",
			"way too nice",
			"big softie",
			"approvening master",
			"the kinda mod reddit deserves"
		], "Approved {0} things", [
			50,
			200,
			1000,
			10000,
			20000
		], function (saveIndex) {
			$body.on("click", ".pretty-button, .approve-button", function () {
				var $this = $(this);
				if ($this.hasClass("positive") || $this.hasClass("approve-button")) {
					self.manager.unlock(saveIndex, 1);
				}
			});
			TB.utils.catchEvent(TB.utils.events.TB_APPROVE_THING, function () {
				self.manager.unlock(saveIndex, 1);
			});
		});
		self.manager.registerSeries([
			"hic sunt dracones",
			"just checkin' the mail",
			"<a href=\"https://www.youtube.com/watch?v=amRXYuAO-Do\" target=\"_blank\">Mr. Postman</a>",
			"You've got mail!"
		], "Checked mod mail {0} times!", [
			1,
			100,
			1000,
			10000
		], function (saveIndex) {
			if (TB.utils.isModmail) {
				self.manager.unlock(saveIndex, 1);
			}
		});
		self.manager.registerSeries([
			"kitteh get!",
			"puppy power!",
			"<a href=\"https://www.youtube.com/watch?v=Fdc765l9psM\" target=\"_blank\">Dr. Jan Itor</a>",
			"/u/Kylde"
		], "Cleared your queues {0} times!", [
			10,
			50,
			100,
			700
		], function (saveIndex) {
			if (TBUtils.isModpage && $body.find("p#noresults").length > 0) {
				self.manager.unlock(saveIndex, 1);
			}
		});
		self.manager.register("Cadbury Bunny", "Found flying Snoo.", function (saveIndex) {
			TB.utils.catchEvent(TB.utils.events.TB_FLY_SNOO, function () {
				self.manager.unlock(saveIndex);
			});
		});
		self.manager.register("you bastard!", "Killed Snoo.", function (saveIndex) {
			TB.utils.catchEvent(TB.utils.events.TB_KILL_SNOO, function () {
				self.manager.unlock(saveIndex);
			});
		});
	};
	TB.register_module(self);
}
(function () {
	window.addEventListener("TBModuleLoaded", function () {
		achievements();
	});
});